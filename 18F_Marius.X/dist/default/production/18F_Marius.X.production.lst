

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Nov 25 19:44:05 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F46K22 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  001000                     __psmallconst:
    78                           	opt stack 0
    79  001000  00                 	db	0
    80  001001                     _dpowers:
    81                           	opt stack 0
    82  001001  0001               	dw	1
    83  001003  000A               	dw	10
    84  001005  0064               	dw	100
    85  001007  03E8               	dw	1000
    86  001009  2710               	dw	10000
    87  00100B                     __end_of_dpowers:
    88                           	opt stack 0
    89  0000                     _ANSELE	set	3900
    90  0000                     _ANSELD	set	3899
    91  0000                     _ANSELC	set	3898
    92  0000                     _ANSELB	set	3897
    93  0000                     _ANSELA	set	3896
    94  0000                     _T1CONbits	set	4045
    95  0000                     _TMR1L	set	4046
    96  0000                     _TMR1H	set	4047
    97  0000                     _PORTBbits	set	3969
    98  0000                     _LATDbits	set	3980
    99  0000                     _SSPBUF	set	4041
   100  0000                     _SSP1BUF	set	4041
   101  0000                     _SSP1CON2bits	set	4037
   102  0000                     _SSP1STAT	set	4039
   103  0000                     _SSP1ADD	set	4040
   104  0000                     _SSP1CON2	set	4037
   105  0000                     _SSP1CON1	set	4038
   106  0000                     _PIE1bits	set	3997
   107  0000                     _INTCON3bits	set	4080
   108  0000                     _IOCBbits	set	3938
   109  0000                     _INTCON2bits	set	4081
   110  0000                     _RCONbits	set	4048
   111  0000                     _TRISBbits	set	3987
   112  0000                     _T1GCON	set	4044
   113  0000                     _T1CON	set	4045
   114  0000                     _TRISCbits	set	3988
   115  0000                     _LATE	set	3981
   116  0000                     _LATD	set	3980
   117  0000                     _LATC	set	3979
   118  0000                     _LATB	set	3978
   119  0000                     _LATA	set	3977
   120  0000                     _PORTE	set	3972
   121  0000                     _PORTD	set	3971
   122  0000                     _PORTC	set	3970
   123  0000                     _PORTB	set	3969
   124  0000                     _PORTA	set	3968
   125  0000                     _TRISE	set	3990
   126  0000                     _TRISD	set	3989
   127  0000                     _TRISC	set	3988
   128  0000                     _TRISB	set	3987
   129  0000                     _TRISA	set	3986
   130  0000                     _INTCONbits	set	4082
   131  0000                     _OSCTUNEbits	set	3995
   132  0000                     _OSCCONbits	set	4051
   133  00100B                     STR_3:
   134  00100B  25                 	db	37
   135  00100C  30                 	db	48	;'0'
   136  00100D  33                 	db	51	;'3'
   137  00100E  75                 	db	117	;'u'
   138  00100F  00                 	db	0
   139  001010                     STR_1:
   140  001010  54                 	db	84	;'T'
   141  001011  65                 	db	101	;'e'
   142  001012  73                 	db	115	;'s'
   143  001013  74                 	db	116	;'t'
   144  001014  00                 	db	0
   145  001015                     STR_5:
   146  001015  20                 	db	32
   147  001016  20                 	db	32
   148  001017  00                 	db	0
   149  001018                     STR_6:
   150  001018  44                 	db	68	;'D'
   151  001019  3D                 	db	61	;'='
   152  00101A  00                 	db	0
   153  00101B                     STR_9:
   154  00101B  46                 	db	70	;'F'
   155  00101C  3D                 	db	61	;'='
   156  00101D  00                 	db	0
   157  00101E                     STR_2:
   158  00101E  53                 	db	83	;'S'
   159  00101F  3D                 	db	61	;'='
   160  001020  00                 	db	0
   161  001021                     STR_4:
   162  001021  63                 	db	99	;'c'
   163  001022  6D                 	db	109	;'m'
   164  001023  00                 	db	0
   165  0000                     
   166                           ; #config settings
   167  001024  00                 	db	0	; dummy byte at the end
   168  0000                     
   169                           	psect	cinit
   170  00199A                     __pcinit:
   171                           	opt stack 0
   172  00199A                     start_initialization:
   173                           	opt stack 0
   174  00199A                     __initialization:
   175                           	opt stack 0
   176                           
   177                           ; Clear objects allocated to BANK0 (14 bytes)
   178  00199A  EE00  F07F         	lfsr	0,__pbssBANK0
   179  00199E  0E0E               	movlw	14
   180  0019A0                     clear_0:
   181  0019A0  6AEE               	clrf	postinc0,c
   182  0019A2  06E8               	decf	wreg,f,c
   183  0019A4  E1FD               	bnz	clear_0
   184                           
   185                           ; Clear objects allocated to COMRAM (30 bytes)
   186  0019A6  EE00  F022         	lfsr	0,__pbssCOMRAM
   187  0019AA  0E1E               	movlw	30
   188  0019AC                     clear_1:
   189  0019AC  6AEE               	clrf	postinc0,c
   190  0019AE  06E8               	decf	wreg,f,c
   191  0019B0  E1FD               	bnz	clear_1
   192  0019B2                     end_of_initialization:
   193                           	opt stack 0
   194  0019B2                     __end_of__initialization:
   195                           	opt stack 0
   196  0019B2  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   197  0019B4  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   198  0019B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   199  0019B8  6EF8               	movwf	tblptru,c
   200  0019BA  0100               	movlb	0
   201  0019BC  EF35  F009         	goto	_main	;jump to C main() function
   202                           tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           	psect	bssCOMRAM
   207  000022                     __pbssCOMRAM:
   208                           	opt stack 0
   209  000022                     _timp_us:
   210                           	opt stack 0
   211  000022                     	ds	4
   212  000026                     _vit_offset:
   213                           	opt stack 0
   214  000026                     	ds	2
   215  000028                     _vit_norm:
   216                           	opt stack 0
   217  000028                     	ds	2
   218  00002A                     _start:
   219                           	opt stack 0
   220  00002A                     	ds	2
   221  00002C                     _cnt:
   222                           	opt stack 0
   223  00002C                     	ds	2
   224  00002E                     _contor:
   225                           	opt stack 0
   226  00002E                     	ds	2
   227  000030                     _TMR:
   228                           	opt stack 0
   229  000030                     	ds	2
   230  000032                     _a:
   231                           	opt stack 0
   232  000032                     	ds	2
   233  000034                     _cor:
   234                           	opt stack 0
   235  000034                     	ds	2
   236  000036                     _distanta_dreapta:
   237                           	opt stack 0
   238  000036                     	ds	2
   239  000038                     _distanta_fata:
   240                           	opt stack 0
   241  000038                     	ds	2
   242  00003A                     _distanta_stanga:
   243                           	opt stack 0
   244  00003A                     	ds	2
   245  00003C                     _delay:
   246                           	opt stack 0
   247  00003C                     	ds	2
   248  00003E                     _data:
   249                           	opt stack 0
   250  00003E                     	ds	2
   251                           tblptru	equ	0xFF8
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK0
   256  00007F                     __pbssBANK0:
   257                           	opt stack 0
   258  00007F                     _diff_centru:
   259                           	opt stack 0
   260  00007F                     	ds	2
   261  000081                     _corectie_mdr_dreapta:
   262                           	opt stack 0
   263  000081                     	ds	2
   264  000083                     _corectie_mst:
   265                           	opt stack 0
   266  000083                     	ds	2
   267  000085                     _buffer:
   268                           	opt stack 0
   269  000085                     	ds	8
   270                           tblptru	equ	0xFF8
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           
   274                           	psect	cstackBANK0
   275  000060                     __pcstackBANK0:
   276                           	opt stack 0
   277  000060                     ?___wmul:
   278                           	opt stack 0
   279  000060                     ?___lwdiv:
   280                           	opt stack 0
   281  000060                     ?___lldiv:
   282                           	opt stack 0
   283  000060                     _isdigit$1262:
   284                           	opt stack 0
   285  000060                     I2C_Write_Display@d:
   286                           	opt stack 0
   287  000060                     ___wmul@multiplier:
   288                           	opt stack 0
   289  000060                     ___lwdiv@dividend:
   290                           	opt stack 0
   291  000060                     ___lldiv@dividend:
   292                           	opt stack 0
   293                           
   294                           ; 4 bytes @ 0x0
   295  000060                     	ds	1
   296  000061                     isdigit@c:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x1
   300  000061                     	ds	1
   301  000062                     ??_Lcd_Cmd:
   302  000062                     Lcd_Write_Char@a:
   303                           	opt stack 0
   304  000062                     ___wmul@multiplicand:
   305                           	opt stack 0
   306  000062                     ___lwdiv@divisor:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  000062                     	ds	1
   311  000063                     Lcd_Write_Char@y:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  000063                     	ds	1
   316  000064                     _Lcd_Cmd$654:
   317                           	opt stack 0
   318  000064                     Lcd_Write_Char@temp:
   319                           	opt stack 0
   320  000064                     ___lwdiv@counter:
   321                           	opt stack 0
   322  000064                     ___lldiv@divisor:
   323                           	opt stack 0
   324                           
   325                           ; 4 bytes @ 0x4
   326  000064                     	ds	1
   327  000065                     Lcd_Cmd@buff:
   328                           	opt stack 0
   329  000065                     Lcd_Write_String@a:
   330                           	opt stack 0
   331  000065                     ___lwdiv@quotient:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x5
   335  000065                     	ds	2
   336  000067                     ??_Lcd_Write_String:
   337  000067                     ?___lwmod:
   338                           	opt stack 0
   339  000067                     Lcd_Cmd@a:
   340                           	opt stack 0
   341  000067                     ___lwmod@dividend:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x7
   345  000067                     	ds	1
   346  000068                     ??_Lcd_Init:
   347  000068                     Lcd_Set_Cursor@b:
   348                           	opt stack 0
   349  000068                     ___lldiv@quotient:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x8
   353  000068                     	ds	1
   354  000069                     Lcd_Set_Cursor@a:
   355                           	opt stack 0
   356  000069                     Lcd_Write_String@i:
   357                           	opt stack 0
   358  000069                     ___lwmod@divisor:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x9
   362  000069                     	ds	1
   363  00006A                     Lcd_Set_Cursor@z:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0xA
   367  00006A                     	ds	1
   368  00006B                     ?_sprintf:
   369                           	opt stack 0
   370  00006B                     Lcd_Set_Cursor@y:
   371                           	opt stack 0
   372  00006B                     sprintf@sp:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  00006B                     	ds	1
   377  00006C                     Lcd_Set_Cursor@temp:
   378                           	opt stack 0
   379  00006C                     ___lldiv@counter:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0xC
   383  00006C                     	ds	1
   384  00006D                     sprintf@f:
   385                           	opt stack 0
   386  00006D                     I2C_Master_Init@c:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0xD
   390  00006D                     	ds	4
   391  000071                     ??_I2C_Master_Init:
   392  000071                     ??_sprintf:
   393                           
   394                           ; 1 bytes @ 0x11
   395  000071                     	ds	4
   396  000075                     ??_config:
   397  000075                     sprintf@ap:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x15
   401  000075                     	ds	2
   402  000077                     sprintf@flag:
   403                           	opt stack 0
   404  000077                     config@cor:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x17
   408  000077                     	ds	1
   409  000078                     sprintf@val:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x18
   413  000078                     	ds	2
   414  00007A                     sprintf@prec:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x1A
   418  00007A                     	ds	1
   419  00007B                     sprintf@width:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x1B
   423  00007B                     	ds	2
   424  00007D                     sprintf@c:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x1D
   428  00007D                     	ds	1
   429  00007E                     ??_main:
   430                           
   431                           ; 1 bytes @ 0x1E
   432  00007E                     	ds	1
   433                           tblptru	equ	0xFF8
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           
   437                           	psect	cstackCOMRAM
   438  000001                     __pcstackCOMRAM:
   439                           	opt stack 0
   440  000001                     ?i2___lwdiv:
   441                           	opt stack 0
   442  000001                     ?i2___lldiv:
   443                           	opt stack 0
   444  000001                     i2___lwdiv@dividend:
   445                           	opt stack 0
   446  000001                     i2___lldiv@dividend:
   447                           	opt stack 0
   448                           
   449                           ; 4 bytes @ 0x0
   450  000001                     	ds	2
   451  000003                     i2___lwdiv@divisor:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x2
   455  000003                     	ds	2
   456  000005                     i2___lwdiv@quotient:
   457                           	opt stack 0
   458  000005                     i2___lldiv@divisor:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0x4
   462  000005                     	ds	2
   463  000007                     i2___lwdiv@counter:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x6
   467  000007                     	ds	1
   468  000008                     ?i2___wmul:
   469                           	opt stack 0
   470  000008                     i2___wmul@multiplier:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x7
   474  000008                     	ds	1
   475  000009                     i2___lldiv@quotient:
   476                           	opt stack 0
   477                           
   478                           ; 4 bytes @ 0x8
   479  000009                     	ds	1
   480  00000A                     i2___wmul@multiplicand:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0x9
   484  00000A                     	ds	2
   485  00000C                     i2___wmul@product:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xB
   489  00000C                     	ds	1
   490  00000D                     i2___lldiv@counter:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0xC
   494  00000D                     	ds	1
   495  00000E                     ??_ISR:
   496                           
   497                           ; 1 bytes @ 0xD
   498  00000E                     	ds	18
   499  000020                     ??_get_distance:
   500  000020                     ??_isdigit:
   501  000020                     ??_I2C_Master_Wait:
   502  000020                     ___lwmod@counter:
   503                           	opt stack 0
   504  000020                     ___wmul@product:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x1F
   508  000020                     	ds	1
   509  000021                     Lcd_Port@data:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0x20
   513  000021                     	ds	1
   514  000022                     tblptru	equ	0xFF8
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518                           ; 1 bytes @ 0x21
   519 ;;
   520 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   521 ;;
   522 ;; *************** function _main *****************
   523 ;; Defined at:
   524 ;;		line 26 in file "main.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   542 ;;Total ram usage:        1 bytes
   543 ;; Hardware stack levels required when called:    8
   544 ;; This function calls:
   545 ;;		_Lcd_Set_Cursor
   546 ;;		_Lcd_Write_String
   547 ;;		_config
   548 ;;		_get_distance
   549 ;;		_sprintf
   550 ;; This function is called by:
   551 ;;		Startup code after reset
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text0
   556  00126A                     __ptext0:
   557                           	opt stack 0
   558  00126A                     _main:
   559                           	opt stack 23
   560                           
   561                           ;main.c: 27: config();
   562                           
   563                           ;incstack = 0
   564  00126A  ECC2  F009         	call	_config	;wreg free
   565  00126E                     
   566                           ;main.c: 30: {
   567                           ;main.c: 32: get_distance();
   568  00126E  ECCC  F00A         	call	_get_distance	;wreg free
   569                           
   570                           ;main.c: 38: Lcd_Set_Cursor(1,1);
   571  001272  0E01               	movlw	1
   572  001274  0100               	movlb	0	; () banked
   573  001276  6F68               	movwf	Lcd_Set_Cursor@b& (0+255),b
   574  001278  0E01               	movlw	1
   575  00127A  EC17  F00C         	call	_Lcd_Set_Cursor
   576                           
   577                           ;main.c: 39: Lcd_Write_String("S=");
   578  00127E  0E1E               	movlw	low STR_2
   579  001280  0100               	movlb	0	; () banked
   580  001282  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   581  001284  0E10               	movlw	high STR_2
   582  001286  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   583  001288  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   584                           
   585                           ;main.c: 40: sprintf(buffer, "%03u", distanta_stanga);
   586  00128C  0E85               	movlw	low _buffer
   587  00128E  0100               	movlb	0	; () banked
   588  001290  6F6B               	movwf	sprintf@sp& (0+255),b
   589  001292  0E00               	movlw	high _buffer
   590  001294  6F6C               	movwf	(sprintf@sp+1)& (0+255),b
   591  001296  0E0B               	movlw	low STR_3
   592  001298  6F6D               	movwf	sprintf@f& (0+255),b
   593  00129A  0E10               	movlw	high STR_3
   594  00129C  6F6E               	movwf	(sprintf@f+1)& (0+255),b
   595  00129E  C03A  F06F         	movff	_distanta_stanga,?_sprintf+4
   596  0012A2  C03B  F070         	movff	_distanta_stanga+1,?_sprintf+5
   597  0012A6  EC13  F008         	call	_sprintf	;wreg free
   598                           
   599                           ;main.c: 41: Lcd_Write_String(buffer);
   600  0012AA  0E85               	movlw	low _buffer
   601  0012AC  0100               	movlb	0	; () banked
   602  0012AE  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   603  0012B0  0E00               	movlw	high _buffer
   604  0012B2  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   605  0012B4  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   606                           
   607                           ;main.c: 42: Lcd_Write_String("cm");
   608  0012B8  0E21               	movlw	low STR_4
   609  0012BA  0100               	movlb	0	; () banked
   610  0012BC  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   611  0012BE  0E10               	movlw	high STR_4
   612  0012C0  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   613  0012C2  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   614                           
   615                           ;main.c: 44: Lcd_Write_String("  ");
   616  0012C6  0E15               	movlw	low STR_5
   617  0012C8  0100               	movlb	0	; () banked
   618  0012CA  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   619  0012CC  0E10               	movlw	high STR_5
   620  0012CE  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   621  0012D0  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   622                           
   623                           ;main.c: 46: Lcd_Write_String("D=");
   624  0012D4  0E18               	movlw	low STR_6
   625  0012D6  0100               	movlb	0	; () banked
   626  0012D8  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   627  0012DA  0E10               	movlw	high STR_6
   628  0012DC  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   629  0012DE  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   630                           
   631                           ;main.c: 47: sprintf(buffer, "%03u", distanta_dreapta);
   632  0012E2  0E85               	movlw	low _buffer
   633  0012E4  0100               	movlb	0	; () banked
   634  0012E6  6F6B               	movwf	sprintf@sp& (0+255),b
   635  0012E8  0E00               	movlw	high _buffer
   636  0012EA  6F6C               	movwf	(sprintf@sp+1)& (0+255),b
   637  0012EC  0E0B               	movlw	low STR_3
   638  0012EE  6F6D               	movwf	sprintf@f& (0+255),b
   639  0012F0  0E10               	movlw	high STR_3
   640  0012F2  6F6E               	movwf	(sprintf@f+1)& (0+255),b
   641  0012F4  C036  F06F         	movff	_distanta_dreapta,?_sprintf+4
   642  0012F8  C037  F070         	movff	_distanta_dreapta+1,?_sprintf+5
   643  0012FC  EC13  F008         	call	_sprintf	;wreg free
   644                           
   645                           ;main.c: 48: Lcd_Write_String(buffer);
   646  001300  0E85               	movlw	low _buffer
   647  001302  0100               	movlb	0	; () banked
   648  001304  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   649  001306  0E00               	movlw	high _buffer
   650  001308  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   651  00130A  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   652                           
   653                           ;main.c: 49: Lcd_Write_String("cm");
   654  00130E  0E21               	movlw	low STR_4
   655  001310  0100               	movlb	0	; () banked
   656  001312  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   657  001314  0E10               	movlw	high STR_4
   658  001316  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   659  001318  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   660                           
   661                           ;main.c: 51: Lcd_Set_Cursor(2,6);
   662  00131C  0E06               	movlw	6
   663  00131E  0100               	movlb	0	; () banked
   664  001320  6F68               	movwf	Lcd_Set_Cursor@b& (0+255),b
   665  001322  0E02               	movlw	2
   666  001324  EC17  F00C         	call	_Lcd_Set_Cursor
   667                           
   668                           ;main.c: 52: Lcd_Write_String("F=");
   669  001328  0E1B               	movlw	low STR_9
   670  00132A  0100               	movlb	0	; () banked
   671  00132C  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   672  00132E  0E10               	movlw	high STR_9
   673  001330  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   674  001332  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   675                           
   676                           ;main.c: 53: sprintf(buffer, "%03u", distanta_fata);
   677  001336  0E85               	movlw	low _buffer
   678  001338  0100               	movlb	0	; () banked
   679  00133A  6F6B               	movwf	sprintf@sp& (0+255),b
   680  00133C  0E00               	movlw	high _buffer
   681  00133E  6F6C               	movwf	(sprintf@sp+1)& (0+255),b
   682  001340  0E0B               	movlw	low STR_3
   683  001342  6F6D               	movwf	sprintf@f& (0+255),b
   684  001344  0E10               	movlw	high STR_3
   685  001346  6F6E               	movwf	(sprintf@f+1)& (0+255),b
   686  001348  C038  F06F         	movff	_distanta_fata,?_sprintf+4
   687  00134C  C039  F070         	movff	_distanta_fata+1,?_sprintf+5
   688  001350  EC13  F008         	call	_sprintf	;wreg free
   689                           
   690                           ;main.c: 54: Lcd_Write_String(buffer);
   691  001354  0E85               	movlw	low _buffer
   692  001356  0100               	movlb	0	; () banked
   693  001358  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   694  00135A  0E00               	movlw	high _buffer
   695  00135C  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   696  00135E  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   697                           
   698                           ;main.c: 55: Lcd_Write_String("cm");
   699  001362  0E21               	movlw	low STR_4
   700  001364  0100               	movlb	0	; () banked
   701  001366  6F65               	movwf	Lcd_Write_String@a& (0+255),b
   702  001368  0E10               	movlw	high STR_4
   703  00136A  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
   704  00136C  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
   705                           
   706                           ;main.c: 58: _delay((unsigned long)((20)*(16000000/4000.0)));
   707  001370  0E68               	movlw	104
   708  001372  0100               	movlb	0	; () banked
   709  001374  6F7E               	movwf	??_main& (0+255),b
   710  001376  0EE4               	movlw	228
   711  001378                     u1427:
   712  001378  2EE8               	decfsz	wreg,f,c
   713  00137A  D7FE               	bra	u1427
   714  00137C  2F7E               	decfsz	??_main& (0+255),f,b
   715  00137E  D7FC               	bra	u1427
   716  001380  F000               	nop	
   717  001382  D775               	goto	l246
   718  001384                     __end_of_main:
   719                           	opt stack 0
   720                           tblptru	equ	0xFF8
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           
   724 ;; *************** function _sprintf *****************
   725 ;; Defined at:
   726 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  sp              2   11[BANK0 ] PTR unsigned char 
   729 ;;		 -> buffer(8), 
   730 ;;  f               2   13[BANK0 ] PTR const unsigned char 
   731 ;;		 -> STR_10(5), STR_7(5), STR_3(5), 
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  tmpval          4    0        struct .
   734 ;;  cp              3    0        PTR const unsigned char 
   735 ;;  width           2   27[BANK0 ] int 
   736 ;;  val             2   24[BANK0 ] unsigned int 
   737 ;;  ap              2   21[BANK0 ] PTR void [1]
   738 ;;		 -> ?_sprintf(2), 
   739 ;;  len             2    0        unsigned int 
   740 ;;  c               1   29[BANK0 ] char 
   741 ;;  prec            1   26[BANK0 ] char 
   742 ;;  flag            1   23[BANK0 ] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  2   11[BANK0 ] int 
   745 ;; Registers used:
   746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   752 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   756 ;;Total ram usage:       19 bytes
   757 ;; Hardware stack levels used:    1
   758 ;; Hardware stack levels required when called:    3
   759 ;; This function calls:
   760 ;;		___lwdiv
   761 ;;		___lwmod
   762 ;;		___wmul
   763 ;;		_isdigit
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text1
   770  001026                     __ptext1:
   771                           	opt stack 0
   772  001026                     _sprintf:
   773                           	opt stack 27
   774                           
   775                           ;doprnt.c: 494: va_list ap;
   776                           ;doprnt.c: 499: signed char c;
   777                           ;doprnt.c: 501: int width;
   778                           ;doprnt.c: 506: signed char prec;
   779                           ;doprnt.c: 508: unsigned char flag;
   780                           ;doprnt.c: 523: union {
   781                           ;doprnt.c: 524: unsigned long vd;
   782                           ;doprnt.c: 525: double integ;
   783                           ;doprnt.c: 526: } tmpval;
   784                           ;doprnt.c: 528: unsigned int val;
   785                           ;doprnt.c: 529: unsigned len;
   786                           ;doprnt.c: 530: const char * cp;
   787                           ;doprnt.c: 533: *ap = __va_start();
   788                           
   789                           ;incstack = 0
   790  001026  0E6F               	movlw	low (?_sprintf+4)
   791  001028  0100               	movlb	0	; () banked
   792  00102A  6F75               	movwf	sprintf@ap& (0+255),b
   793  00102C  0E00               	movlw	high (?_sprintf+4)
   794  00102E  6F76               	movwf	(sprintf@ap+1)& (0+255),b
   795                           
   796                           ;doprnt.c: 536: while(c = *f++) {
   797  001030  D108               	goto	u1380
   798  001032                     
   799                           ; BSR set to: 0
   800                           ;doprnt.c: 538: if(c != '%')
   801                           
   802                           ; BSR set to: 0
   803  001032  0E25               	movlw	37
   804  001034  197D               	xorwf	sprintf@c& (0+255),w,b
   805  001036  B4D8               	btfsc	status,2,c
   806  001038  D009               	goto	l291
   807                           
   808                           ; BSR set to: 0
   809                           ;doprnt.c: 540: {
   810                           ;doprnt.c: 541: ((*sp++ = (c)));
   811  00103A  C06B  FFD9         	movff	sprintf@sp,fsr2l
   812  00103E  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
   813  001042  C07D  FFDF         	movff	sprintf@c,indf2
   814                           
   815                           ; BSR set to: 0
   816  001046  4B6B               	infsnz	sprintf@sp& (0+255),f,b
   817  001048  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
   818                           
   819                           ;doprnt.c: 542: continue;
   820  00104A  D0FB               	goto	u1380
   821  00104C                     l291:
   822                           
   823                           ; BSR set to: 0
   824                           ;doprnt.c: 543: }
   825                           ;doprnt.c: 546: width = 0;
   826                           
   827                           ; BSR set to: 0
   828  00104C  0E00               	movlw	0
   829  00104E  6F7C               	movwf	(sprintf@width+1)& (0+255),b
   830  001050  0E00               	movlw	0
   831  001052  6F7B               	movwf	sprintf@width& (0+255),b
   832                           
   833                           ;doprnt.c: 548: flag = 0;
   834  001054  0E00               	movlw	0
   835  001056  6F77               	movwf	sprintf@flag& (0+255),b
   836                           
   837                           ; BSR set to: 0
   838                           ;doprnt.c: 551: switch(*f) {
   839                           
   840                           ;doprnt.c: 550: for(;;) {
   841  001058  D004               	goto	l293
   842  00105A                     
   843                           ;doprnt.c: 580: flag |= 0x04;
   844                           
   845                           ; BSR set to: 0
   846  00105A  0100               	movlb	0	; () banked
   847  00105C  8577               	bsf	sprintf@flag& (0+255),2,b
   848                           
   849                           ;doprnt.c: 581: f++;
   850  00105E  4B6D               	infsnz	sprintf@f& (0+255),f,b
   851  001060  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
   852  001062                     l293:
   853                           
   854                           ; BSR set to: 0
   855  001062  C06D  FFF6         	movff	sprintf@f,tblptrl
   856  001066  C06E  FFF7         	movff	sprintf@f+1,tblptrh
   857  00106A                     	if	0	;tblptru may be non-zero
   858  00106A                     	endif
   859  00106A                     	if	0	;tblptru may be non-zero
   860  00106A                     	endif
   861  00106A  0008               	tblrd		*
   862  00106C  50F5               	movf	tablat,w,c
   863                           
   864                           ; Switch size 1, requested type "space"
   865                           ; Number of cases is 1, Range of values is 48 to 48
   866                           ; switch strategies available:
   867                           ; Name         Instructions Cycles
   868                           ; simple_byte            4     3 (average)
   869                           ;	Chosen strategy is simple_byte
   870  00106E  0A30               	xorlw	48	; case 48
   871  001070  B4D8               	btfsc	status,2,c
   872  001072  D7F3               	goto	l294
   873                           
   874                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   875                           
   876                           ;doprnt.c: 586: }
   877                           
   878                           ;doprnt.c: 585: break;
   879  001074  C06D  FFF6         	movff	sprintf@f,tblptrl
   880  001078  C06E  FFF7         	movff	sprintf@f+1,tblptrh
   881  00107C                     	if	0	;tblptru may be non-zero
   882  00107C                     	endif
   883  00107C                     	if	0	;tblptru may be non-zero
   884  00107C                     	endif
   885  00107C  0008               	tblrd		*
   886  00107E  50F5               	movf	tablat,w,c
   887  001080  EC06  F00D         	call	_isdigit
   888  001084  A0D8               	btfss	status,0,c
   889  001086  D03A               	goto	l301
   890                           
   891                           ;doprnt.c: 598: width = 0;
   892  001088  0E00               	movlw	0
   893  00108A  0100               	movlb	0	; () banked
   894  00108C  6F7C               	movwf	(sprintf@width+1)& (0+255),b
   895  00108E  0E00               	movlw	0
   896  001090  6F7B               	movwf	sprintf@width& (0+255),b
   897  001092                     
   898                           ;doprnt.c: 600: width *= 10;
   899                           
   900                           ; BSR set to: 0
   901  001092  C07B  F060         	movff	sprintf@width,___wmul@multiplier
   902  001096  C07C  F061         	movff	sprintf@width+1,___wmul@multiplier+1
   903  00109A  0E00               	movlw	0
   904  00109C  0100               	movlb	0	; () banked
   905  00109E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
   906  0010A0  0E0A               	movlw	10
   907  0010A2  6F62               	movwf	___wmul@multiplicand& (0+255),b
   908  0010A4  ECB9  F00C         	call	___wmul	;wreg free
   909  0010A8  C060  F07B         	movff	?___wmul,sprintf@width
   910  0010AC  C061  F07C         	movff	?___wmul+1,sprintf@width+1
   911                           
   912                           ;doprnt.c: 601: width += *f++ - '0';
   913  0010B0  0ED0               	movlw	208
   914  0010B2  0100               	movlb	0	; () banked
   915  0010B4  6F71               	movwf	??_sprintf& (0+255),b
   916  0010B6  0EFF               	movlw	255
   917  0010B8  6F72               	movwf	(??_sprintf+1)& (0+255),b
   918  0010BA  C06D  FFF6         	movff	sprintf@f,tblptrl
   919  0010BE  C06E  FFF7         	movff	sprintf@f+1,tblptrh
   920  0010C2                     	if	0	;tblptru may be non-zero
   921  0010C2                     	endif
   922  0010C2                     	if	0	;tblptru may be non-zero
   923  0010C2                     	endif
   924  0010C2  0008               	tblrd		*
   925  0010C4  50F5               	movf	tablat,w,c
   926  0010C6  6F73               	movwf	(??_sprintf+2)& (0+255),b
   927  0010C8  6B74               	clrf	(??_sprintf+3)& (0+255),b
   928  0010CA  5171               	movf	??_sprintf& (0+255),w,b
   929  0010CC  2773               	addwf	(??_sprintf+2)& (0+255),f,b
   930  0010CE  5172               	movf	(??_sprintf+1)& (0+255),w,b
   931  0010D0  2374               	addwfc	(??_sprintf+3)& (0+255),f,b
   932  0010D2  5173               	movf	(??_sprintf+2)& (0+255),w,b
   933  0010D4  277B               	addwf	sprintf@width& (0+255),f,b
   934  0010D6  5174               	movf	(??_sprintf+3)& (0+255),w,b
   935  0010D8  237C               	addwfc	(sprintf@width+1)& (0+255),f,b
   936                           
   937                           ; BSR set to: 0
   938  0010DA  4B6D               	infsnz	sprintf@f& (0+255),f,b
   939  0010DC  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
   940                           
   941                           ; BSR set to: 0
   942                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   943  0010DE  C06D  FFF6         	movff	sprintf@f,tblptrl
   944  0010E2  C06E  FFF7         	movff	sprintf@f+1,tblptrh
   945  0010E6                     	if	0	;tblptru may be non-zero
   946  0010E6                     	endif
   947  0010E6                     	if	0	;tblptru may be non-zero
   948  0010E6                     	endif
   949  0010E6  0008               	tblrd		*
   950  0010E8  50F5               	movf	tablat,w,c
   951  0010EA  EC06  F00D         	call	_isdigit
   952  0010EE  A0D8               	btfss	status,0,c
   953  0010F0  D005               	goto	l301
   954  0010F2  D7CF               	goto	l299
   955  0010F4                     
   956                           ;doprnt.c: 818: flag |= 0xC0;
   957  0010F4  0EC0               	movlw	192
   958  0010F6  0100               	movlb	0	; () banked
   959  0010F8  1377               	iorwf	sprintf@flag& (0+255),f,b
   960                           
   961                           ; BSR set to: 0
   962                           ;doprnt.c: 822: }
   963                           
   964                           ;doprnt.c: 819: break;
   965  0010FA  D012               	goto	l306
   966  0010FC                     l301:
   967                           
   968                           ; BSR set to: 0
   969  0010FC  C06D  FFF6         	movff	sprintf@f,tblptrl
   970  001100  C06E  FFF7         	movff	sprintf@f+1,tblptrh
   971  001104  0100               	movlb	0	; () banked
   972  001106  4B6D               	infsnz	sprintf@f& (0+255),f,b
   973  001108  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
   974  00110A                     	if	0	;tblptru may be non-zero
   975  00110A                     	endif
   976  00110A                     	if	0	;tblptru may be non-zero
   977  00110A                     	endif
   978  00110A  0008               	tblrd		*
   979  00110C  CFF5 F07D          	movff	tablat,sprintf@c
   980  001110  517D               	movf	sprintf@c& (0+255),w,b
   981                           
   982                           ; Switch size 1, requested type "space"
   983                           ; Number of cases is 2, Range of values is 0 to 117
   984                           ; switch strategies available:
   985                           ; Name         Instructions Cycles
   986                           ; simple_byte            7     4 (average)
   987                           ;	Chosen strategy is simple_byte
   988  001112  0A00               	xorlw	0	; case 0
   989  001114  B4D8               	btfsc	status,2,c
   990  001116  D0A2               	goto	u1390
   991  001118  0A75               	xorlw	117	; case 117
   992  00111A  B4D8               	btfsc	status,2,c
   993  00111C  D7EB               	goto	l305
   994  00111E  D091               	goto	u1380
   995  001120                     l306:
   996                           
   997                           ; BSR set to: 0
   998                           ;doprnt.c: 1273: {
   999                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1000                           
  1001                           ; BSR set to: 0
  1002  001120  C075  FFD9         	movff	sprintf@ap,fsr2l
  1003  001124  C076  FFDA         	movff	sprintf@ap+1,fsr2h
  1004  001128  CFDE F078          	movff	postinc2,sprintf@val
  1005  00112C  CFDD F079          	movff	postdec2,sprintf@val+1
  1006                           
  1007                           ; BSR set to: 0
  1008  001130  0E02               	movlw	2
  1009  001132  2775               	addwf	sprintf@ap& (0+255),f,b
  1010  001134  0E00               	movlw	0
  1011  001136  2376               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;doprnt.c: 1287: }
  1015                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1016  001138  0E01               	movlw	1
  1017  00113A  6F7D               	movwf	sprintf@c& (0+255),b
  1018  00113C                     l2363:
  1019                           
  1020                           ; BSR set to: 0
  1021  00113C  0E05               	movlw	5
  1022  00113E  197D               	xorwf	sprintf@c& (0+255),w,b
  1023  001140  B4D8               	btfsc	status,2,c
  1024  001142  D012               	goto	u1310
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;doprnt.c: 1306: if(val < dpowers[c])
  1028                           
  1029                           ; BSR set to: 0
  1030                           
  1031                           ; BSR set to: 0
  1032  001144  517D               	movf	sprintf@c& (0+255),w,b
  1033  001146  0D02               	mullw	2
  1034  001148  0E01               	movlw	low _dpowers
  1035  00114A  24F3               	addwf	prodl,w,c
  1036  00114C  6EF6               	movwf	tblptrl,c
  1037  00114E  0E10               	movlw	high _dpowers
  1038  001150  20F4               	addwfc	prodh,w,c
  1039  001152  6EF7               	movwf	tblptrh,c
  1040  001154                     	if	0	;There are less than 3 active tblptr bytes
  1041  001154                     	endif
  1042  001154  0009               	tblrd		*+
  1043  001156  50F5               	movf	tablat,w,c
  1044  001158  5D78               	subwf	sprintf@val& (0+255),w,b
  1045  00115A  0009               	tblrd		*+
  1046  00115C  50F5               	movf	tablat,w,c
  1047  00115E  5979               	subwfb	(sprintf@val+1)& (0+255),w,b
  1048  001160  A0D8               	btfss	status,0,c
  1049  001162  D002               	goto	u1310
  1050                           
  1051                           ; BSR set to: 0
  1052                           
  1053                           ; BSR set to: 0
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;doprnt.c: 1307: break;
  1057  001164  2B7D               	incf	sprintf@c& (0+255),f,b
  1058  001166  D7EA               	goto	l2363
  1059  001168                     u1310:
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;doprnt.c: 1381: if(width > c)
  1063                           
  1064                           ; BSR set to: 0
  1065  001168  0E80               	movlw	128
  1066  00116A  BF7D               	btfsc	sprintf@c& (0+255),7,b
  1067  00116C  0E7F               	movlw	127
  1068  00116E  6F71               	movwf	??_sprintf& (0+255),b
  1069  001170  517B               	movf	sprintf@width& (0+255),w,b
  1070  001172  5D7D               	subwf	sprintf@c& (0+255),w,b
  1071  001174  517C               	movf	(sprintf@width+1)& (0+255),w,b
  1072  001176  0A80               	xorlw	128
  1073  001178  5971               	subwfb	??_sprintf& (0+255),w,b
  1074  00117A  B0D8               	btfsc	status,0,c
  1075  00117C  D007               	goto	l310
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;doprnt.c: 1382: width -= c;
  1079  00117E  517D               	movf	sprintf@c& (0+255),w,b
  1080  001180  5F7B               	subwf	sprintf@width& (0+255),f,b
  1081  001182  0E00               	movlw	0
  1082  001184  BF7D               	btfsc	sprintf@c& (0+255),7,b
  1083  001186  0EFF               	movlw	255
  1084  001188  5B7C               	subwfb	(sprintf@width+1)& (0+255),f,b
  1085  00118A  D004               	goto	l311
  1086  00118C                     l310:
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;doprnt.c: 1383: else
  1090                           ;doprnt.c: 1384: width = 0;
  1091                           
  1092                           ; BSR set to: 0
  1093  00118C  0E00               	movlw	0
  1094  00118E  6F7C               	movwf	(sprintf@width+1)& (0+255),b
  1095  001190  0E00               	movlw	0
  1096  001192  6F7B               	movwf	sprintf@width& (0+255),b
  1097  001194                     l311:
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;doprnt.c: 1387: if(flag & 0x04) {
  1101                           
  1102                           ; BSR set to: 0
  1103  001194  A577               	btfss	sprintf@flag& (0+255),2,b
  1104  001196  D010               	goto	l312
  1105  001198                     
  1106                           ; BSR set to: 0
  1107                           ;doprnt.c: 1415: if(width)
  1108  001198  517B               	movf	sprintf@width& (0+255),w,b
  1109  00119A  117C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1110  00119C  B4D8               	btfsc	status,2,c
  1111  00119E  D01F               	goto	u1370
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  1115                           
  1116                           ; BSR set to: 0
  1117                           
  1118                           ;doprnt.c: 1416: do
  1119  0011A0  C06B  FFD9         	movff	sprintf@sp,fsr2l
  1120  0011A4  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  1121  0011A8  0E30               	movlw	48
  1122  0011AA  6EDF               	movwf	indf2,c
  1123                           
  1124                           ; BSR set to: 0
  1125  0011AC  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  1126  0011AE  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;doprnt.c: 1418: while(--width);
  1130  0011B0  077B               	decf	sprintf@width& (0+255),f,b
  1131  0011B2  A0D8               	btfss	status,0,c
  1132  0011B4  077C               	decf	(sprintf@width+1)& (0+255),f,b
  1133  0011B6  D7F0               	goto	L1
  1134  0011B8                     l312:
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;doprnt.c: 1422: {
  1138                           ;doprnt.c: 1424: if(width
  1139                           ;doprnt.c: 1428: )
  1140                           
  1141                           ; BSR set to: 0
  1142  0011B8  517B               	movf	sprintf@width& (0+255),w,b
  1143  0011BA  117C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1144  0011BC  B4D8               	btfsc	status,2,c
  1145  0011BE  D00F               	goto	u1370
  1146  0011C0                     u1360:
  1147                           
  1148                           ; BSR set to: 0
  1149                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1150                           
  1151                           ; BSR set to: 0
  1152                           
  1153                           ;doprnt.c: 1429: do
  1154  0011C0  C06B  FFD9         	movff	sprintf@sp,fsr2l
  1155  0011C4  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  1156  0011C8  0E20               	movlw	32
  1157  0011CA  6EDF               	movwf	indf2,c
  1158                           
  1159                           ; BSR set to: 0
  1160  0011CC  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  1161  0011CE  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;doprnt.c: 1431: while(--width);
  1165  0011D0  077B               	decf	sprintf@width& (0+255),f,b
  1166  0011D2  A0D8               	btfss	status,0,c
  1167  0011D4  077C               	decf	(sprintf@width+1)& (0+255),f,b
  1168  0011D6  517B               	movf	sprintf@width& (0+255),w,b
  1169  0011D8  117C               	iorwf	(sprintf@width+1)& (0+255),w,b
  1170  0011DA  A4D8               	btfss	status,2,c
  1171  0011DC  D7F1               	goto	u1360
  1172  0011DE                     u1370:
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;doprnt.c: 1469: }
  1176                           ;doprnt.c: 1472: prec = c;
  1177                           
  1178                           ; BSR set to: 0
  1179                           
  1180                           ; BSR set to: 0
  1181  0011DE  C07D  F07A         	movff	sprintf@c,sprintf@prec
  1182                           
  1183                           ;doprnt.c: 1474: while(prec--) {
  1184  0011E2  D02B               	goto	l320
  1185  0011E4                     
  1186                           ; BSR set to: 0
  1187                           ;doprnt.c: 1478: {
  1188                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1189                           
  1190                           ; BSR set to: 0
  1191  0011E4  517A               	movf	sprintf@prec& (0+255),w,b
  1192  0011E6  0D02               	mullw	2
  1193  0011E8  0E01               	movlw	low _dpowers
  1194  0011EA  24F3               	addwf	prodl,w,c
  1195  0011EC  6EF6               	movwf	tblptrl,c
  1196  0011EE  0E10               	movlw	high _dpowers
  1197  0011F0  20F4               	addwfc	prodh,w,c
  1198  0011F2  6EF7               	movwf	tblptrh,c
  1199  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  1200  0011F4                     	endif
  1201  0011F4  0009               	tblrd		*+
  1202  0011F6  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1203  0011FA  000A               	tblrd		*-
  1204  0011FC  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1205  001200  C078  F060         	movff	sprintf@val,___lwdiv@dividend
  1206  001204  C079  F061         	movff	sprintf@val+1,___lwdiv@dividend+1
  1207  001208  EC44  F00C         	call	___lwdiv	;wreg free
  1208  00120C  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  1209  001210  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  1210  001214  0E00               	movlw	0
  1211  001216  0100               	movlb	0	; () banked
  1212  001218  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  1213  00121A  0E0A               	movlw	10
  1214  00121C  6F69               	movwf	___lwmod@divisor& (0+255),b
  1215  00121E  EC97  F00C         	call	___lwmod	;wreg free
  1216  001222  0100               	movlb	0	; () banked
  1217  001224  5167               	movf	?___lwmod& (0+255),w,b
  1218  001226  0F30               	addlw	48
  1219  001228  6F7D               	movwf	sprintf@c& (0+255),b
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;doprnt.c: 1523: }
  1223                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1224  00122A  C06B  FFD9         	movff	sprintf@sp,fsr2l
  1225  00122E  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  1226  001232  C07D  FFDF         	movff	sprintf@c,indf2
  1227                           
  1228                           ; BSR set to: 0
  1229  001236  4B6B               	infsnz	sprintf@sp& (0+255),f,b
  1230  001238  2B6C               	incf	(sprintf@sp+1)& (0+255),f,b
  1231  00123A                     l320:
  1232                           
  1233                           ; BSR set to: 0
  1234                           
  1235                           ; BSR set to: 0
  1236  00123A  077A               	decf	sprintf@prec& (0+255),f,b
  1237  00123C  297A               	incf	sprintf@prec& (0+255),w,b
  1238  00123E  A4D8               	btfss	status,2,c
  1239  001240  D7D1               	goto	l321
  1240  001242                     u1380:
  1241                           
  1242                           ; BSR set to: 0
  1243                           
  1244                           ; BSR set to: 0
  1245  001242  C06D  FFF6         	movff	sprintf@f,tblptrl
  1246  001246  C06E  FFF7         	movff	sprintf@f+1,tblptrh
  1247  00124A  0100               	movlb	0	; () banked
  1248  00124C  4B6D               	infsnz	sprintf@f& (0+255),f,b
  1249  00124E  2B6E               	incf	(sprintf@f+1)& (0+255),f,b
  1250  001250                     	if	0	;tblptru may be non-zero
  1251  001250                     	endif
  1252  001250                     	if	0	;tblptru may be non-zero
  1253  001250                     	endif
  1254  001250  0008               	tblrd		*
  1255  001252  CFF5 F07D          	movff	tablat,sprintf@c
  1256  001256  517D               	movf	sprintf@c& (0+255),w,b
  1257  001258  A4D8               	btfss	status,2,c
  1258  00125A  D6EB               	goto	l290
  1259  00125C                     u1390:
  1260                           
  1261                           ;doprnt.c: 1538: *sp = 0;
  1262                           
  1263                           ; BSR set to: 0
  1264                           
  1265                           ;doprnt.c: 1525: }
  1266                           ;doprnt.c: 1533: }
  1267                           ;doprnt.c: 1535: alldone:
  1268                           
  1269                           ; BSR set to: 0
  1270  00125C  C06B  FFD9         	movff	sprintf@sp,fsr2l
  1271  001260  C06C  FFDA         	movff	sprintf@sp+1,fsr2h
  1272  001264  0E00               	movlw	0
  1273  001266  6EDF               	movwf	indf2,c
  1274  001268  0012               	return	
  1275  00126A                     __end_of_sprintf:
  1276                           	opt stack 0
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           postinc0	equ	0xFEE
  1284                           wreg	equ	0xFE8
  1285                           indf2	equ	0xFDF
  1286                           postinc2	equ	0xFDE
  1287                           postdec2	equ	0xFDD
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           status	equ	0xFD8
  1291                           
  1292 ;; *************** function _isdigit *****************
  1293 ;; Defined at:
  1294 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  c               1    wreg     unsigned char 
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;  c               1    1[BANK0 ] unsigned char 
  1299 ;; Return value:  Size  Location     Type
  1300 ;;		None               void
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1311 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1312 ;;Total ram usage:        3 bytes
  1313 ;; Hardware stack levels used:    1
  1314 ;; Hardware stack levels required when called:    2
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_sprintf
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322                           	psect	text2
  1323  001A0C                     __ptext2:
  1324                           	opt stack 0
  1325  001A0C                     _isdigit:
  1326                           	opt stack 27
  1327                           
  1328                           ;incstack = 0
  1329                           ;isdigit@c stored from wreg
  1330  001A0C  0100               	movlb	0	; () banked
  1331  001A0E  6F61               	movwf	isdigit@c& (0+255),b
  1332  001A10  0E00               	movlw	0
  1333  001A12  0100               	movlb	0	; () banked
  1334  001A14  6F60               	movwf	_isdigit$1262& (0+255),b
  1335                           
  1336                           ; BSR set to: 0
  1337  001A16  0E3A               	movlw	58
  1338  001A18  6161               	cpfslt	isdigit@c& (0+255),b
  1339  001A1A  D005               	goto	l654
  1340                           
  1341                           ; BSR set to: 0
  1342  001A1C  0E2F               	movlw	47
  1343  001A1E  6561               	cpfsgt	isdigit@c& (0+255),b
  1344  001A20  D002               	goto	l654
  1345                           
  1346                           ; BSR set to: 0
  1347  001A22  0E01               	movlw	1
  1348  001A24  6F60               	movwf	_isdigit$1262& (0+255),b
  1349  001A26                     l654:
  1350                           
  1351                           ; BSR set to: 0
  1352                           
  1353                           ; BSR set to: 0
  1354  001A26  C060  F020         	movff	_isdigit$1262,??_isdigit
  1355  001A2A  3020               	rrcf	??_isdigit,w,c
  1356  001A2C  0012               	return	
  1357  001A2E                     __end_of_isdigit:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodh	equ	0xFF4
  1364                           prodl	equ	0xFF3
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           indf2	equ	0xFDF
  1368                           postinc2	equ	0xFDE
  1369                           postdec2	equ	0xFDD
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function ___wmul *****************
  1375 ;; Defined at:
  1376 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1379 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  product         2   31[COMRAM] unsigned int 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  2    0[BANK0 ] unsigned int 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2, status,0, prodl, prodh
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1394 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1395 ;;Total ram usage:        6 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    2
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_sprintf
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text3
  1406  001972                     __ptext3:
  1407                           	opt stack 0
  1408  001972                     ___wmul:
  1409                           	opt stack 27
  1410                           
  1411                           ; BSR set to: 0
  1412                           ;incstack = 0
  1413  001972  0100               	movlb	0	; () banked
  1414  001974  5160               	movf	___wmul@multiplier& (0+255),w,b
  1415  001976  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1416  001978  CFF3 F020          	movff	prodl,___wmul@product
  1417  00197C  CFF4 F021          	movff	prodh,___wmul@product+1
  1418  001980  5160               	movf	___wmul@multiplier& (0+255),w,b
  1419  001982  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  1420  001984  50F3               	movf	prodl,w,c
  1421  001986  2621               	addwf	___wmul@product+1,f,c
  1422  001988  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  1423  00198A  0362               	mulwf	___wmul@multiplicand& (0+255),b
  1424  00198C  50F3               	movf	prodl,w,c
  1425  00198E  2621               	addwf	___wmul@product+1,f,c
  1426                           
  1427                           ; BSR set to: 0
  1428  001990  C020  F060         	movff	___wmul@product,?___wmul
  1429  001994  C021  F061         	movff	___wmul@product+1,?___wmul+1
  1430  001998  0012               	return	
  1431  00199A                     __end_of___wmul:
  1432                           	opt stack 0
  1433                           tblptru	equ	0xFF8
  1434                           tblptrh	equ	0xFF7
  1435                           tblptrl	equ	0xFF6
  1436                           tablat	equ	0xFF5
  1437                           prodh	equ	0xFF4
  1438                           prodl	equ	0xFF3
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           indf2	equ	0xFDF
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function ___lwmod *****************
  1449 ;; Defined at:
  1450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  dividend        2    7[BANK0 ] unsigned int 
  1453 ;;  divisor         2    9[BANK0 ] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  counter         1   31[COMRAM] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  2    7[BANK0 ] unsigned int 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1465 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1468 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1469 ;;Total ram usage:        5 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    2
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_sprintf
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text4
  1480  00192E                     __ptext4:
  1481                           	opt stack 0
  1482  00192E                     ___lwmod:
  1483                           	opt stack 27
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;incstack = 0
  1487  00192E  0100               	movlb	0	; () banked
  1488  001930  5169               	movf	___lwmod@divisor& (0+255),w,b
  1489  001932  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  1490  001934  B4D8               	btfsc	status,2,c
  1491  001936  D018               	goto	l748
  1492                           
  1493                           ; BSR set to: 0
  1494  001938  0E01               	movlw	1
  1495  00193A  6E20               	movwf	___lwmod@counter,c
  1496  00193C  D004               	goto	l743
  1497  00193E                     
  1498                           ; BSR set to: 0
  1499                           
  1500                           ; BSR set to: 0
  1501  00193E  90D8               	bcf	status,0,c
  1502  001940  3769               	rlcf	___lwmod@divisor& (0+255),f,b
  1503  001942  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  1504  001944  2A20               	incf	___lwmod@counter,f,c
  1505  001946                     l743:
  1506                           
  1507                           ; BSR set to: 0
  1508                           
  1509                           ; BSR set to: 0
  1510  001946  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  1511  001948  D7FA               	goto	l744
  1512  00194A                     u1240:
  1513                           
  1514                           ; BSR set to: 0
  1515                           
  1516                           ; BSR set to: 0
  1517                           
  1518                           ; BSR set to: 0
  1519  00194A  5169               	movf	___lwmod@divisor& (0+255),w,b
  1520  00194C  5D67               	subwf	___lwmod@dividend& (0+255),w,b
  1521  00194E  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1522  001950  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  1523  001952  A0D8               	btfss	status,0,c
  1524  001954  D004               	goto	l747
  1525                           
  1526                           ; BSR set to: 0
  1527  001956  5169               	movf	___lwmod@divisor& (0+255),w,b
  1528  001958  5F67               	subwf	___lwmod@dividend& (0+255),f,b
  1529  00195A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  1530  00195C  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  1531  00195E                     l747:
  1532                           
  1533                           ; BSR set to: 0
  1534                           
  1535                           ; BSR set to: 0
  1536  00195E  90D8               	bcf	status,0,c
  1537  001960  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  1538  001962  3369               	rrcf	___lwmod@divisor& (0+255),f,b
  1539                           
  1540                           ; BSR set to: 0
  1541  001964  2E20               	decfsz	___lwmod@counter,f,c
  1542  001966  D7F1               	goto	u1240
  1543  001968                     l748:
  1544                           
  1545                           ; BSR set to: 0
  1546                           
  1547                           ; BSR set to: 0
  1548  001968  C067  F067         	movff	___lwmod@dividend,?___lwmod
  1549  00196C  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
  1550                           
  1551                           ; BSR set to: 0
  1552  001970  0012               	return		;funcret
  1553  001972                     __end_of___lwmod:
  1554                           	opt stack 0
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           prodh	equ	0xFF4
  1560                           prodl	equ	0xFF3
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           indf2	equ	0xFDF
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           fsr2h	equ	0xFDA
  1567                           fsr2l	equ	0xFD9
  1568                           status	equ	0xFD8
  1569                           
  1570 ;; *************** function ___lwdiv *****************
  1571 ;; Defined at:
  1572 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  dividend        2    0[BANK0 ] unsigned int 
  1575 ;;  divisor         2    2[BANK0 ] unsigned int 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  quotient        2    5[BANK0 ] unsigned int 
  1578 ;;  counter         1    4[BANK0 ] unsigned char 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  2    0[BANK0 ] unsigned int 
  1581 ;; Registers used:
  1582 ;;		wreg, status,2, status,0
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1588 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1589 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;Total ram usage:        7 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    2
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_sprintf
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text5
  1603  001888                     __ptext5:
  1604                           	opt stack 0
  1605  001888                     ___lwdiv:
  1606                           	opt stack 27
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;incstack = 0
  1610  001888  0E00               	movlw	0
  1611  00188A  0100               	movlb	0	; () banked
  1612  00188C  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1613  00188E  0E00               	movlw	0
  1614  001890  6F65               	movwf	___lwdiv@quotient& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617  001892  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1618  001894  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1619  001896  B4D8               	btfsc	status,2,c
  1620  001898  D01C               	goto	l738
  1621                           
  1622                           ; BSR set to: 0
  1623  00189A  0E01               	movlw	1
  1624  00189C  6F64               	movwf	___lwdiv@counter& (0+255),b
  1625  00189E  D004               	goto	l733
  1626  0018A0                     
  1627                           ; BSR set to: 0
  1628                           
  1629                           ; BSR set to: 0
  1630  0018A0  90D8               	bcf	status,0,c
  1631  0018A2  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1632  0018A4  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1633  0018A6  2B64               	incf	___lwdiv@counter& (0+255),f,b
  1634  0018A8                     l733:
  1635                           
  1636                           ; BSR set to: 0
  1637                           
  1638                           ; BSR set to: 0
  1639  0018A8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1640  0018AA  D7FA               	goto	l734
  1641  0018AC                     u1210:
  1642                           
  1643                           ; BSR set to: 0
  1644                           
  1645                           ; BSR set to: 0
  1646                           
  1647                           ; BSR set to: 0
  1648  0018AC  90D8               	bcf	status,0,c
  1649  0018AE  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  1650  0018B0  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1651                           
  1652                           ; BSR set to: 0
  1653  0018B2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1654  0018B4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1655  0018B6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1656  0018B8  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1657  0018BA  A0D8               	btfss	status,0,c
  1658  0018BC  D005               	goto	l737
  1659                           
  1660                           ; BSR set to: 0
  1661  0018BE  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1662  0018C0  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1663  0018C2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1664  0018C4  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1665                           
  1666                           ; BSR set to: 0
  1667  0018C6  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  1668  0018C8                     l737:
  1669                           
  1670                           ; BSR set to: 0
  1671                           
  1672                           ; BSR set to: 0
  1673  0018C8  90D8               	bcf	status,0,c
  1674  0018CA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1675  0018CC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1676                           
  1677                           ; BSR set to: 0
  1678  0018CE  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  1679  0018D0  D7ED               	goto	u1210
  1680  0018D2                     l738:
  1681                           
  1682                           ; BSR set to: 0
  1683                           
  1684                           ; BSR set to: 0
  1685  0018D2  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  1686  0018D6  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1687                           
  1688                           ; BSR set to: 0
  1689  0018DA  0012               	return		;funcret
  1690  0018DC                     __end_of___lwdiv:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           prodh	equ	0xFF4
  1697                           prodl	equ	0xFF3
  1698                           postinc0	equ	0xFEE
  1699                           wreg	equ	0xFE8
  1700                           indf2	equ	0xFDF
  1701                           postinc2	equ	0xFDE
  1702                           postdec2	equ	0xFDD
  1703                           fsr2h	equ	0xFDA
  1704                           fsr2l	equ	0xFD9
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _get_distance *****************
  1708 ;; Defined at:
  1709 ;;		line 65 in file "main.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;		None
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;                  1    wreg      void 
  1716 ;; Registers used:
  1717 ;;		wreg, status,2
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;Total ram usage:        1 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    2
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text6
  1738  001598                     __ptext6:
  1739                           	opt stack 0
  1740  001598                     _get_distance:
  1741                           	opt stack 28
  1742                           
  1743                           ;main.c: 68: INTCONbits.RBIE=1;
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;incstack = 0
  1747  001598  86F2               	bsf	intcon,3,c	;volatile
  1748                           
  1749                           ;main.c: 69: _delay((unsigned long)((20)*(16000000/4000.0)));
  1750  00159A  0E68               	movlw	104
  1751  00159C  6E20               	movwf	??_get_distance& (0+255),c
  1752  00159E  0EE4               	movlw	228
  1753  0015A0                     u1437:
  1754  0015A0  2EE8               	decfsz	wreg,f,c
  1755  0015A2  D7FE               	bra	u1437
  1756  0015A4  2E20               	decfsz	??_get_distance& (0+255),f,c
  1757  0015A6  D7FC               	bra	u1437
  1758  0015A8  D000               	nop2	
  1759                           
  1760                           ;main.c: 70: contor=1;
  1761  0015AA  0E00               	movlw	0
  1762  0015AC  6E2F               	movwf	_contor+1,c
  1763  0015AE  0E01               	movlw	1
  1764  0015B0  6E2E               	movwf	_contor,c
  1765                           
  1766                           ;main.c: 71: LATDbits.LATD5=1;
  1767  0015B2  8A8C               	bsf	3980,5,c	;volatile
  1768                           
  1769                           ;main.c: 72: _delay((unsigned long)((10)*(16000000/4000000.0)));
  1770  0015B4  0E0D               	movlw	13
  1771  0015B6                     u1447:
  1772  0015B6  2EE8               	decfsz	wreg,f,c
  1773  0015B8  D7FE               	bra	u1447
  1774  0015BA  F000               	nop	
  1775                           
  1776                           ;main.c: 73: LATDbits.LATD5=0;
  1777  0015BC  9A8C               	bcf	3980,5,c	;volatile
  1778                           
  1779                           ;main.c: 74: _delay((unsigned long)((10)*(16000000/4000000.0)));
  1780  0015BE  0E0D               	movlw	13
  1781  0015C0                     u1457:
  1782  0015C0  2EE8               	decfsz	wreg,f,c
  1783  0015C2  D7FE               	bra	u1457
  1784  0015C4  F000               	nop	
  1785                           
  1786                           ;main.c: 77: _delay((unsigned long)((20)*(16000000/4000.0)));
  1787  0015C6  0E68               	movlw	104
  1788  0015C8  6E20               	movwf	??_get_distance& (0+255),c
  1789  0015CA  0EE4               	movlw	228
  1790  0015CC                     u1467:
  1791  0015CC  2EE8               	decfsz	wreg,f,c
  1792  0015CE  D7FE               	bra	u1467
  1793  0015D0  2E20               	decfsz	??_get_distance& (0+255),f,c
  1794  0015D2  D7FC               	bra	u1467
  1795  0015D4  D000               	nop2	
  1796                           
  1797                           ;main.c: 78: contor=2;
  1798  0015D6  0E00               	movlw	0
  1799  0015D8  6E2F               	movwf	_contor+1,c
  1800  0015DA  0E02               	movlw	2
  1801  0015DC  6E2E               	movwf	_contor,c
  1802                           
  1803                           ;main.c: 79: LATDbits.LATD6=1;
  1804  0015DE  8C8C               	bsf	3980,6,c	;volatile
  1805                           
  1806                           ;main.c: 80: _delay((unsigned long)((10)*(16000000/4000000.0)));
  1807  0015E0  0E0D               	movlw	13
  1808  0015E2                     u1477:
  1809  0015E2  2EE8               	decfsz	wreg,f,c
  1810  0015E4  D7FE               	bra	u1477
  1811  0015E6  F000               	nop	
  1812                           
  1813                           ;main.c: 81: LATDbits.LATD6=0;
  1814  0015E8  9C8C               	bcf	3980,6,c	;volatile
  1815                           
  1816                           ;main.c: 83: _delay((unsigned long)((20)*(16000000/4000.0)));
  1817  0015EA  0E68               	movlw	104
  1818  0015EC  6E20               	movwf	??_get_distance& (0+255),c
  1819  0015EE  0EE4               	movlw	228
  1820  0015F0                     u1487:
  1821  0015F0  2EE8               	decfsz	wreg,f,c
  1822  0015F2  D7FE               	bra	u1487
  1823  0015F4  2E20               	decfsz	??_get_distance& (0+255),f,c
  1824  0015F6  D7FC               	bra	u1487
  1825  0015F8  D000               	nop2	
  1826                           
  1827                           ;main.c: 84: contor=3;
  1828  0015FA  0E00               	movlw	0
  1829  0015FC  6E2F               	movwf	_contor+1,c
  1830  0015FE  0E03               	movlw	3
  1831  001600  6E2E               	movwf	_contor,c
  1832                           
  1833                           ;main.c: 85: LATDbits.LATD7=1;
  1834  001602  8E8C               	bsf	3980,7,c	;volatile
  1835                           
  1836                           ;main.c: 86: _delay((unsigned long)((10)*(16000000/4000000.0)));
  1837  001604  0E0D               	movlw	13
  1838  001606                     u1497:
  1839  001606  2EE8               	decfsz	wreg,f,c
  1840  001608  D7FE               	bra	u1497
  1841  00160A  F000               	nop	
  1842                           
  1843                           ;main.c: 87: LATDbits.LATD7=0;
  1844  00160C  9E8C               	bcf	3980,7,c	;volatile
  1845                           
  1846                           ;main.c: 88: _delay((unsigned long)((10)*(16000000/4000000.0)));
  1847  00160E  0E0D               	movlw	13
  1848  001610                     u1507:
  1849  001610  2EE8               	decfsz	wreg,f,c
  1850  001612  D7FE               	bra	u1507
  1851  001614  F000               	nop	
  1852  001616  0012               	return		;funcret
  1853  001618                     __end_of_get_distance:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           postinc0	equ	0xFEE
  1863                           wreg	equ	0xFE8
  1864                           indf2	equ	0xFDF
  1865                           postinc2	equ	0xFDE
  1866                           postdec2	equ	0xFDD
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _config *****************
  1872 ;; Defined at:
  1873 ;;		line 15 in file "config.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  cor             2   23[BANK0 ] int 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1889 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;Total ram usage:        4 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    7
  1894 ;; This function calls:
  1895 ;;		_Cursor_Off
  1896 ;;		_I2C_Master_Init
  1897 ;;		_Lcd_Clear
  1898 ;;		_Lcd_Init
  1899 ;;		_Lcd_Set_Cursor
  1900 ;;		_Lcd_Write_String
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text7
  1907  001384                     __ptext7:
  1908                           	opt stack 0
  1909  001384                     _config:
  1910                           	opt stack 23
  1911                           
  1912                           ;config.c: 18: int cor;
  1913                           ;config.c: 19: OSCCONbits.IRCF0=1;
  1914                           
  1915                           ;incstack = 0
  1916  001384  88D3               	bsf	4051,4,c	;volatile
  1917                           
  1918                           ;config.c: 20: OSCCONbits.IRCF1=1;
  1919  001386  8AD3               	bsf	4051,5,c	;volatile
  1920                           
  1921                           ;config.c: 21: OSCCONbits.IRCF2=1;
  1922  001388  8CD3               	bsf	4051,6,c	;volatile
  1923                           
  1924                           ;config.c: 22: OSCTUNEbits.PLLEN = 0;
  1925  00138A  9C9B               	bcf	3995,6,c	;volatile
  1926                           
  1927                           ;config.c: 23: INTCONbits.GIE=0;
  1928  00138C  9EF2               	bcf	intcon,7,c	;volatile
  1929                           
  1930                           ;config.c: 25: ANSELA=0X00;
  1931  00138E  0E00               	movlw	0
  1932  001390  010F               	movlb	15	; () banked
  1933  001392  6F38               	movwf	56,b	;volatile
  1934                           
  1935                           ;config.c: 26: ANSELB=0X00;
  1936  001394  0E00               	movlw	0
  1937  001396  6F39               	movwf	57,b	;volatile
  1938                           
  1939                           ;config.c: 27: ANSELC=0X00;
  1940  001398  0E00               	movlw	0
  1941  00139A  6F3A               	movwf	58,b	;volatile
  1942                           
  1943                           ;config.c: 28: ANSELD=0X00;
  1944  00139C  0E00               	movlw	0
  1945  00139E  6F3B               	movwf	59,b	;volatile
  1946                           
  1947                           ;config.c: 29: ANSELE=0X00;
  1948  0013A0  0E00               	movlw	0
  1949  0013A2  6F3C               	movwf	60,b	;volatile
  1950                           
  1951                           ;config.c: 30: TRISA=0X00;
  1952  0013A4  0E00               	movlw	0
  1953  0013A6  6E92               	movwf	3986,c	;volatile
  1954                           
  1955                           ;config.c: 31: TRISB=0X00;
  1956  0013A8  0E00               	movlw	0
  1957  0013AA  6E93               	movwf	3987,c	;volatile
  1958                           
  1959                           ;config.c: 32: TRISC=0X00;
  1960  0013AC  0E00               	movlw	0
  1961  0013AE  6E94               	movwf	3988,c	;volatile
  1962                           
  1963                           ;config.c: 33: TRISD=0X00;
  1964  0013B0  0E00               	movlw	0
  1965  0013B2  6E95               	movwf	3989,c	;volatile
  1966                           
  1967                           ;config.c: 34: TRISE=0X00;
  1968  0013B4  0E00               	movlw	0
  1969  0013B6  6E96               	movwf	3990,c	;volatile
  1970                           
  1971                           ;config.c: 35: PORTA=0X00;
  1972  0013B8  0E00               	movlw	0
  1973  0013BA  6E80               	movwf	3968,c	;volatile
  1974                           
  1975                           ;config.c: 36: PORTB=0X00;
  1976  0013BC  0E00               	movlw	0
  1977  0013BE  6E81               	movwf	3969,c	;volatile
  1978                           
  1979                           ;config.c: 37: PORTC=0X00;
  1980  0013C0  0E00               	movlw	0
  1981  0013C2  6E82               	movwf	3970,c	;volatile
  1982                           
  1983                           ;config.c: 38: PORTD=0X00;
  1984  0013C4  0E00               	movlw	0
  1985  0013C6  6E83               	movwf	3971,c	;volatile
  1986                           
  1987                           ;config.c: 39: PORTE=0X00;
  1988  0013C8  0E00               	movlw	0
  1989  0013CA  6E84               	movwf	3972,c	;volatile
  1990                           
  1991                           ;config.c: 40: LATA=0X00;
  1992  0013CC  0E00               	movlw	0
  1993  0013CE  6E89               	movwf	3977,c	;volatile
  1994                           
  1995                           ;config.c: 41: LATB=0X00;
  1996  0013D0  0E00               	movlw	0
  1997  0013D2  6E8A               	movwf	3978,c	;volatile
  1998                           
  1999                           ;config.c: 42: LATC=0X00;
  2000  0013D4  0E00               	movlw	0
  2001  0013D6  6E8B               	movwf	3979,c	;volatile
  2002                           
  2003                           ;config.c: 43: LATD=0X00;
  2004  0013D8  0E00               	movlw	0
  2005  0013DA  6E8C               	movwf	3980,c	;volatile
  2006                           
  2007                           ;config.c: 44: LATE=0X00;
  2008  0013DC  0E00               	movlw	0
  2009  0013DE  6E8D               	movwf	3981,c	;volatile
  2010                           
  2011                           ; BSR set to: 15
  2012                           ;config.c: 46: TRISCbits.TRISC3=1;
  2013  0013E0  8694               	bsf	3988,3,c	;volatile
  2014                           
  2015                           ; BSR set to: 15
  2016                           ;config.c: 47: TRISCbits.TRISC4=1;
  2017  0013E2  8894               	bsf	3988,4,c	;volatile
  2018                           
  2019                           ; BSR set to: 15
  2020                           ;config.c: 48: I2C_Master_Init(100000);
  2021  0013E4  0EA0               	movlw	160
  2022  0013E6  0100               	movlb	0	; () banked
  2023  0013E8  6F6D               	movwf	I2C_Master_Init@c& (0+255),b
  2024  0013EA  0E86               	movlw	134
  2025  0013EC  6F6E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2026  0013EE  0E01               	movlw	1
  2027  0013F0  6F6F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2028  0013F2  0E00               	movlw	0
  2029  0013F4  6F70               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2030  0013F6  ECBA  F00B         	call	_I2C_Master_Init	;wreg free
  2031                           
  2032                           ;config.c: 49: _delay((unsigned long)((100)*(16000000/4000.0)));
  2033  0013FA  0E03               	movlw	3
  2034  0013FC  0100               	movlb	0	; () banked
  2035  0013FE  6F76               	movwf	(??_config+1)& (0+255),b
  2036  001400  0E08               	movlw	8
  2037  001402  6F75               	movwf	??_config& (0+255),b
  2038  001404  0E77               	movlw	119
  2039  001406                     u1517:
  2040  001406  2EE8               	decfsz	wreg,f,c
  2041  001408  D7FE               	bra	u1517
  2042  00140A  2F75               	decfsz	??_config& (0+255),f,b
  2043  00140C  D7FC               	bra	u1517
  2044  00140E  2F76               	decfsz	(??_config+1)& (0+255),f,b
  2045  001410  D7FA               	bra	u1517
  2046                           
  2047                           ;config.c: 50: Lcd_Init();
  2048  001412  EC4A  F00B         	call	_Lcd_Init	;wreg free
  2049                           
  2050                           ;config.c: 51: Lcd_Clear();
  2051  001416  EC20  F00D         	call	_Lcd_Clear	;wreg free
  2052                           
  2053                           ;config.c: 52: Cursor_Off();
  2054  00141A  EC27  F00D         	call	_Cursor_Off	;wreg free
  2055                           
  2056                           ;config.c: 53: Lcd_Set_Cursor(1,1);
  2057  00141E  0E01               	movlw	1
  2058  001420  0100               	movlb	0	; () banked
  2059  001422  6F68               	movwf	Lcd_Set_Cursor@b& (0+255),b
  2060  001424  0E01               	movlw	1
  2061  001426  EC17  F00C         	call	_Lcd_Set_Cursor
  2062                           
  2063                           ;config.c: 54: Lcd_Write_String("Test");
  2064  00142A  0E10               	movlw	low STR_1
  2065  00142C  0100               	movlb	0	; () banked
  2066  00142E  6F65               	movwf	Lcd_Write_String@a& (0+255),b
  2067  001430  0E10               	movlw	high STR_1
  2068  001432  6F66               	movwf	(Lcd_Write_String@a+1)& (0+255),b
  2069  001434  EC0C  F00B         	call	_Lcd_Write_String	;wreg free
  2070                           
  2071                           ;config.c: 55: _delay((unsigned long)((100)*(16000000/4000.0)));
  2072  001438  0E03               	movlw	3
  2073  00143A  0100               	movlb	0	; () banked
  2074  00143C  6F76               	movwf	(??_config+1)& (0+255),b
  2075  00143E  0E08               	movlw	8
  2076  001440  6F75               	movwf	??_config& (0+255),b
  2077  001442  0E77               	movlw	119
  2078  001444                     u1527:
  2079  001444  2EE8               	decfsz	wreg,f,c
  2080  001446  D7FE               	bra	u1527
  2081  001448  2F75               	decfsz	??_config& (0+255),f,b
  2082  00144A  D7FC               	bra	u1527
  2083  00144C  2F76               	decfsz	(??_config+1)& (0+255),f,b
  2084  00144E  D7FA               	bra	u1527
  2085                           
  2086                           ;config.c: 58: T1CON=0x30;
  2087  001450  0E30               	movlw	48
  2088  001452  6ECD               	movwf	4045,c	;volatile
  2089                           
  2090                           ;config.c: 59: T1GCON=0x40;
  2091  001454  0E40               	movlw	64
  2092  001456  6ECC               	movwf	4044,c	;volatile
  2093                           
  2094                           ;config.c: 63: TRISBbits.TRISB4=1;
  2095  001458  8893               	bsf	3987,4,c	;volatile
  2096                           
  2097                           ;config.c: 64: TRISBbits.TRISB5=1;
  2098  00145A  8A93               	bsf	3987,5,c	;volatile
  2099                           
  2100                           ;config.c: 65: TRISBbits.TRISB6=1;
  2101  00145C  8C93               	bsf	3987,6,c	;volatile
  2102                           
  2103                           ;config.c: 67: RCONbits.IPEN=0;
  2104  00145E  9ED0               	bcf	4048,7,c	;volatile
  2105                           
  2106                           ;config.c: 68: INTCONbits.GIE=1;
  2107  001460  8EF2               	bsf	intcon,7,c	;volatile
  2108                           
  2109                           ;config.c: 69: INTCONbits.PEIE=1;
  2110  001462  8CF2               	bsf	intcon,6,c	;volatile
  2111                           
  2112                           ;config.c: 72: INTCONbits.RBIE=0;
  2113  001464  96F2               	bcf	intcon,3,c	;volatile
  2114                           
  2115                           ;config.c: 73: INTCON2bits.RBIP=0;
  2116  001466  90F1               	bcf	intcon2,0,c	;volatile
  2117                           
  2118                           ;config.c: 74: cor=PORTB;
  2119  001468  CF81 F077          	movff	3969,config@cor	;volatile
  2120  00146C  0100               	movlb	0	; () banked
  2121  00146E  6B78               	clrf	(config@cor+1)& (0+255),b
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;config.c: 75: INTCONbits.RBIF=0;
  2125  001470  90F2               	bcf	intcon,0,c	;volatile
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;config.c: 77: IOCBbits.IOCB4=1;
  2129  001472  8862               	bsf	3938,4,c	;volatile
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;config.c: 78: IOCBbits.IOCB5=1;
  2133  001474  8A62               	bsf	3938,5,c	;volatile
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;config.c: 79: IOCBbits.IOCB6=1;
  2137  001476  8C62               	bsf	3938,6,c	;volatile
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;config.c: 80: IOCBbits.IOCB7=0;
  2141  001478  9E62               	bcf	3938,7,c	;volatile
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;config.c: 82: INTCON2bits.NOT_RBPU=1;
  2145  00147A  8EF1               	bsf	intcon2,7,c	;volatile
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;config.c: 86: INTCON2bits.INTEDG0=1;
  2149  00147C  8CF1               	bsf	intcon2,6,c	;volatile
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;config.c: 87: INTCON2bits.INTEDG1=1;
  2153  00147E  8AF1               	bsf	intcon2,5,c	;volatile
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;config.c: 88: INTCON2bits.INTEDG2=1;
  2157  001480  88F1               	bsf	intcon2,4,c	;volatile
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;config.c: 90: INTCONbits.INT0IE=0;
  2161  001482  98F2               	bcf	intcon,4,c	;volatile
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;config.c: 91: INTCON3bits.INT1IE=0;
  2165  001484  96F0               	bcf	intcon3,3,c	;volatile
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;config.c: 92: INTCON3bits.INT2IE=0;
  2169  001486  98F0               	bcf	intcon3,4,c	;volatile
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;config.c: 94: INTCONbits.INT0IF=0;
  2173  001488  92F2               	bcf	intcon,1,c	;volatile
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;config.c: 95: INTCON3bits.INT1IF=0;
  2177  00148A  90F0               	bcf	intcon3,0,c	;volatile
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;config.c: 96: INTCON3bits.INT2IF=0;
  2181  00148C  92F0               	bcf	intcon3,1,c	;volatile
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;config.c: 105: PIE1bits.RC1IE=0;
  2185  00148E  9A9D               	bcf	3997,5,c	;volatile
  2186                           
  2187                           ; BSR set to: 0
  2188  001490  0012               	return		;funcret
  2189  001492                     __end_of_config:
  2190                           	opt stack 0
  2191                           tblptru	equ	0xFF8
  2192                           tblptrh	equ	0xFF7
  2193                           tblptrl	equ	0xFF6
  2194                           tablat	equ	0xFF5
  2195                           prodh	equ	0xFF4
  2196                           prodl	equ	0xFF3
  2197                           intcon	equ	0xFF2
  2198                           intcon2	equ	0xFF1
  2199                           intcon3	equ	0xFF0
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           indf2	equ	0xFDF
  2203                           postinc2	equ	0xFDE
  2204                           postdec2	equ	0xFDD
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _Lcd_Write_String *****************
  2210 ;; Defined at:
  2211 ;;		line 114 in file "i2c_display.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;  a               2    5[BANK0 ] PTR unsigned char 
  2214 ;;		 -> STR_11(3), STR_9(3), STR_8(3), STR_6(3), 
  2215 ;;		 -> STR_5(3), STR_4(3), buffer(8), STR_2(3), 
  2216 ;;		 -> STR_1(5), 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  i               2    9[BANK0 ] int 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2228 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;Total ram usage:        6 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    6
  2235 ;; This function calls:
  2236 ;;		_Lcd_Write_Char
  2237 ;; This function is called by:
  2238 ;;		_config
  2239 ;;		_main
  2240 ;; This function uses a non-reentrant model
  2241 ;;
  2242                           
  2243                           	psect	text8
  2244  001618                     __ptext8:
  2245                           	opt stack 0
  2246  001618                     _Lcd_Write_String:
  2247                           	opt stack 23
  2248                           
  2249                           ;i2c_display.c: 116: int i;
  2250                           ;i2c_display.c: 117: for(i=0;a[i]!='\0';i++)
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;incstack = 0
  2254  001618  0E00               	movlw	0
  2255  00161A  0100               	movlb	0	; () banked
  2256  00161C  6F6A               	movwf	(Lcd_Write_String@i+1)& (0+255),b
  2257  00161E  0E00               	movlw	0
  2258  001620  6F69               	movwf	Lcd_Write_String@i& (0+255),b
  2259  001622  D01D               	goto	l133
  2260  001624                     
  2261                           ;i2c_display.c: 118: Lcd_Write_Char(a[i]);
  2262                           
  2263                           ; BSR set to: 0
  2264  001624  0100               	movlb	0	; () banked
  2265  001626  5169               	movf	Lcd_Write_String@i& (0+255),w,b
  2266  001628  2565               	addwf	Lcd_Write_String@a& (0+255),w,b
  2267  00162A  6F67               	movwf	??_Lcd_Write_String& (0+255),b
  2268  00162C  516A               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
  2269  00162E  2166               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  2270  001630  6F68               	movwf	(??_Lcd_Write_String+1)& (0+255),b
  2271  001632  C067  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2272  001636  C068  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2273  00163A  0E00               	movlw	low (__smallconst shr (0+16))
  2274  00163C  6EF8               	movwf	tblptru,c
  2275  00163E  0E0F               	movlw	(high __ramtop+-1)
  2276  001640  64F7               	cpfsgt	tblptrh,c
  2277  001642  D003               	bra	u1157
  2278  001644  0008               	tblrd		*
  2279  001646  50F5               	movf	tablat,w,c
  2280  001648  D005               	bra	u1150
  2281  00164A                     u1157:
  2282  00164A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2283  00164E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2284  001652  50EF               	movf	indf0,w,c
  2285  001654                     u1150:
  2286  001654  EC86  F00B         	call	_Lcd_Write_Char
  2287  001658  0100               	movlb	0	; () banked
  2288  00165A  4B69               	infsnz	Lcd_Write_String@i& (0+255),f,b
  2289  00165C  2B6A               	incf	(Lcd_Write_String@i+1)& (0+255),f,b
  2290  00165E                     l133:
  2291                           
  2292                           ; BSR set to: 0
  2293                           
  2294                           ; BSR set to: 0
  2295  00165E  5169               	movf	Lcd_Write_String@i& (0+255),w,b
  2296  001660  2565               	addwf	Lcd_Write_String@a& (0+255),w,b
  2297  001662  6F67               	movwf	??_Lcd_Write_String& (0+255),b
  2298  001664  516A               	movf	(Lcd_Write_String@i+1)& (0+255),w,b
  2299  001666  2166               	addwfc	(Lcd_Write_String@a+1)& (0+255),w,b
  2300  001668  6F68               	movwf	(??_Lcd_Write_String+1)& (0+255),b
  2301  00166A  C067  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2302  00166E  C068  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  2303  001672  0E00               	movlw	low (__smallconst shr (0+16))
  2304  001674  6EF8               	movwf	tblptru,c
  2305  001676  0E0F               	movlw	(high __ramtop+-1)
  2306  001678  64F7               	cpfsgt	tblptrh,c
  2307  00167A  D003               	bra	u1167
  2308  00167C  0008               	tblrd		*
  2309  00167E  50F5               	movf	tablat,w,c
  2310  001680  D005               	bra	u1160
  2311  001682                     u1167:
  2312  001682  CFF6 FFE9          	movff	tblptrl,fsr0l
  2313  001686  CFF7 FFEA          	movff	tblptrh,fsr0h
  2314  00168A  50EF               	movf	indf0,w,c
  2315  00168C                     u1160:
  2316  00168C  0900               	iorlw	0
  2317  00168E  B4D8               	btfsc	status,2,c
  2318  001690  0012               	return	
  2319  001692  D7C8               	goto	l134
  2320  001694                     __end_of_Lcd_Write_String:
  2321                           	opt stack 0
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           intcon2	equ	0xFF1
  2330                           intcon3	equ	0xFF0
  2331                           indf0	equ	0xFEF
  2332                           postinc0	equ	0xFEE
  2333                           fsr0h	equ	0xFEA
  2334                           fsr0l	equ	0xFE9
  2335                           wreg	equ	0xFE8
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _Lcd_Write_Char *****************
  2344 ;; Defined at:
  2345 ;;		line 90 in file "i2c_display.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;  a               1    wreg     unsigned char 
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  a               1    2[BANK0 ] unsigned char 
  2350 ;;  temp            1    4[BANK0 ] unsigned char 
  2351 ;;  y               1    3[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;Total ram usage:        3 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    5
  2368 ;; This function calls:
  2369 ;;		_Lcd_Port
  2370 ;; This function is called by:
  2371 ;;		_Lcd_Write_String
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text9
  2376  00170C                     __ptext9:
  2377                           	opt stack 0
  2378  00170C                     _Lcd_Write_Char:
  2379                           	opt stack 23
  2380                           
  2381                           ;incstack = 0
  2382                           ;Lcd_Write_Char@a stored from wreg
  2383  00170C  0100               	movlb	0	; () banked
  2384  00170E  6F62               	movwf	Lcd_Write_Char@a& (0+255),b
  2385                           
  2386                           ;i2c_display.c: 92: char temp,y;
  2387                           ;i2c_display.c: 93: temp = a&0x0F;
  2388  001710  0100               	movlb	0	; () banked
  2389  001712  5162               	movf	Lcd_Write_Char@a& (0+255),w,b
  2390  001714  0B0F               	andlw	15
  2391  001716  6F64               	movwf	Lcd_Write_Char@temp& (0+255),b
  2392                           
  2393                           ;i2c_display.c: 94: temp=temp<<4;
  2394  001718  3964               	swapf	Lcd_Write_Char@temp& (0+255),w,b
  2395  00171A  0BF0               	andlw	240
  2396  00171C  6F64               	movwf	Lcd_Write_Char@temp& (0+255),b
  2397                           
  2398                           ;i2c_display.c: 95: y = a&0xF0;
  2399  00171E  5162               	movf	Lcd_Write_Char@a& (0+255),w,b
  2400  001720  0BF0               	andlw	240
  2401  001722  6F63               	movwf	Lcd_Write_Char@y& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;i2c_display.c: 98: Lcd_Port(0x00 | 0x01 | 0x00 | 0x00);
  2405  001724  0E01               	movlw	1
  2406  001726  ECE0  F00C         	call	_Lcd_Port
  2407                           
  2408                           ;i2c_display.c: 99: Lcd_Port(y);
  2409  00172A  0100               	movlb	0	; () banked
  2410  00172C  5163               	movf	Lcd_Write_Char@y& (0+255),w,b
  2411  00172E  ECE0  F00C         	call	_Lcd_Port
  2412                           
  2413                           ;i2c_display.c: 101: Lcd_Port(y | 0x01 | 0x04 | 0x00);
  2414  001732  0100               	movlb	0	; () banked
  2415  001734  5163               	movf	Lcd_Write_Char@y& (0+255),w,b
  2416  001736  0905               	iorlw	5
  2417  001738  ECE0  F00C         	call	_Lcd_Port
  2418                           
  2419                           ;i2c_display.c: 102: _delay((unsigned long)((40)*(16000000/4000000.0)));
  2420  00173C  0E35               	movlw	53
  2421  00173E                     u1537:
  2422  00173E  2EE8               	decfsz	wreg,f,c
  2423  001740  D7FE               	bra	u1537
  2424  001742  F000               	nop	
  2425                           
  2426                           ;i2c_display.c: 104: Lcd_Port(y | 0x01 | 0x00 | 0x00);
  2427  001744  0100               	movlb	0	; () banked
  2428  001746  5163               	movf	Lcd_Write_Char@y& (0+255),w,b
  2429  001748  0901               	iorlw	1
  2430  00174A  ECE0  F00C         	call	_Lcd_Port
  2431                           
  2432                           ;i2c_display.c: 105: Lcd_Port(temp);
  2433  00174E  0100               	movlb	0	; () banked
  2434  001750  5164               	movf	Lcd_Write_Char@temp& (0+255),w,b
  2435  001752  ECE0  F00C         	call	_Lcd_Port
  2436                           
  2437                           ;i2c_display.c: 108: Lcd_Port(temp | 0x01 | 0x04 | 0x00);
  2438  001756  0100               	movlb	0	; () banked
  2439  001758  5164               	movf	Lcd_Write_Char@temp& (0+255),w,b
  2440  00175A  0905               	iorlw	5
  2441  00175C  ECE0  F00C         	call	_Lcd_Port
  2442                           
  2443                           ;i2c_display.c: 109: _delay((unsigned long)((40)*(16000000/4000000.0)));
  2444  001760  0E35               	movlw	53
  2445  001762                     u1547:
  2446  001762  2EE8               	decfsz	wreg,f,c
  2447  001764  D7FE               	bra	u1547
  2448  001766  F000               	nop	
  2449                           
  2450                           ;i2c_display.c: 111: Lcd_Port(temp | 0x01 | 0x00 | 0x00);
  2451  001768  0100               	movlb	0	; () banked
  2452  00176A  5164               	movf	Lcd_Write_Char@temp& (0+255),w,b
  2453  00176C  0901               	iorlw	1
  2454  00176E  ECE0  F00C         	call	_Lcd_Port
  2455  001772  0012               	return		;funcret
  2456  001774                     __end_of_Lcd_Write_Char:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           prodh	equ	0xFF4
  2463                           prodl	equ	0xFF3
  2464                           intcon	equ	0xFF2
  2465                           intcon2	equ	0xFF1
  2466                           intcon3	equ	0xFF0
  2467                           indf0	equ	0xFEF
  2468                           postinc0	equ	0xFEE
  2469                           fsr0h	equ	0xFEA
  2470                           fsr0l	equ	0xFE9
  2471                           wreg	equ	0xFE8
  2472                           indf2	equ	0xFDF
  2473                           postinc2	equ	0xFDE
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           status	equ	0xFD8
  2478                           
  2479 ;; *************** function _Lcd_Set_Cursor *****************
  2480 ;; Defined at:
  2481 ;;		line 50 in file "i2c_display.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  a               1    wreg     unsigned char 
  2484 ;;  b               1    8[BANK0 ] unsigned char 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  a               1    9[BANK0 ] unsigned char 
  2487 ;;  temp            1   12[BANK0 ] unsigned char 
  2488 ;;  y               1   11[BANK0 ] unsigned char 
  2489 ;;  z               1   10[BANK0 ] unsigned char 
  2490 ;; Return value:  Size  Location     Type
  2491 ;;                  1    wreg      void 
  2492 ;; Registers used:
  2493 ;;		wreg, status,2, status,0, cstack
  2494 ;; Tracked objects:
  2495 ;;		On entry : 0/0
  2496 ;;		On exit  : 0/0
  2497 ;;		Unchanged: 0/0
  2498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2499 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;Total ram usage:        5 bytes
  2504 ;; Hardware stack levels used:    1
  2505 ;; Hardware stack levels required when called:    6
  2506 ;; This function calls:
  2507 ;;		_Lcd_Cmd
  2508 ;; This function is called by:
  2509 ;;		_config
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text10
  2515  00182E                     __ptext10:
  2516                           	opt stack 0
  2517  00182E                     _Lcd_Set_Cursor:
  2518                           	opt stack 23
  2519                           
  2520                           ;incstack = 0
  2521                           ;Lcd_Set_Cursor@a stored from wreg
  2522  00182E  0100               	movlb	0	; () banked
  2523  001830  6F69               	movwf	Lcd_Set_Cursor@a& (0+255),b
  2524                           
  2525                           ;i2c_display.c: 52: char temp,z,y;
  2526                           ;i2c_display.c: 53: if(a == 1)
  2527  001832  0100               	movlb	0	; () banked
  2528  001834  0569               	decf	Lcd_Set_Cursor@a& (0+255),w,b
  2529  001836  A4D8               	btfss	status,2,c
  2530  001838  D011               	goto	l121
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;i2c_display.c: 54: {
  2534                           ;i2c_display.c: 55: temp = 0x80 + b - 1;
  2535  00183A  5168               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  2536  00183C  0F7F               	addlw	127
  2537  00183E  6F6C               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  2538                           
  2539                           ;i2c_display.c: 56: z = temp>>4;
  2540  001840  396C               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  2541  001842  0B0F               	andlw	15
  2542  001844  6F6A               	movwf	Lcd_Set_Cursor@z& (0+255),b
  2543                           
  2544                           ;i2c_display.c: 57: y = temp & 0x0F;
  2545  001846  516C               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  2546  001848  0B0F               	andlw	15
  2547  00184A  6F6B               	movwf	Lcd_Set_Cursor@y& (0+255),b
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;i2c_display.c: 58: Lcd_Cmd(z);
  2551  00184C  516A               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  2552  00184E  ECE9  F00B         	call	_Lcd_Cmd
  2553                           
  2554                           ;i2c_display.c: 59: Lcd_Cmd(y);
  2555  001852  0100               	movlb	0	; () banked
  2556  001854  516B               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  2557  001856  ECE9  F00B         	call	_Lcd_Cmd
  2558                           
  2559                           ;i2c_display.c: 60: }
  2560  00185A  0012               	return	
  2561  00185C                     l121:
  2562                           
  2563                           ;i2c_display.c: 61: else if(a == 2)
  2564  00185C  0E02               	movlw	2
  2565  00185E  0100               	movlb	0	; () banked
  2566  001860  1969               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
  2567  001862  A4D8               	btfss	status,2,c
  2568  001864  0012               	return	
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;i2c_display.c: 62: {
  2572                           ;i2c_display.c: 63: temp = 0xC0 + b - 1;
  2573  001866  5168               	movf	Lcd_Set_Cursor@b& (0+255),w,b
  2574  001868  0FBF               	addlw	191
  2575  00186A  6F6C               	movwf	Lcd_Set_Cursor@temp& (0+255),b
  2576                           
  2577                           ;i2c_display.c: 64: z = temp>>4;
  2578  00186C  396C               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
  2579  00186E  0B0F               	andlw	15
  2580  001870  6F6A               	movwf	Lcd_Set_Cursor@z& (0+255),b
  2581                           
  2582                           ;i2c_display.c: 65: y = temp & 0x0F;
  2583  001872  516C               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
  2584  001874  0B0F               	andlw	15
  2585  001876  6F6B               	movwf	Lcd_Set_Cursor@y& (0+255),b
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;i2c_display.c: 66: Lcd_Cmd(z);
  2589  001878  516A               	movf	Lcd_Set_Cursor@z& (0+255),w,b
  2590  00187A  ECE9  F00B         	call	_Lcd_Cmd
  2591                           
  2592                           ;i2c_display.c: 67: Lcd_Cmd(y);
  2593  00187E  0100               	movlb	0	; () banked
  2594  001880  516B               	movf	Lcd_Set_Cursor@y& (0+255),w,b
  2595  001882  ECE9  F00B         	call	_Lcd_Cmd
  2596  001886  0012               	return	
  2597  001888                     __end_of_Lcd_Set_Cursor:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           prodh	equ	0xFF4
  2604                           prodl	equ	0xFF3
  2605                           intcon	equ	0xFF2
  2606                           intcon2	equ	0xFF1
  2607                           intcon3	equ	0xFF0
  2608                           indf0	equ	0xFEF
  2609                           postinc0	equ	0xFEE
  2610                           fsr0h	equ	0xFEA
  2611                           fsr0l	equ	0xFE9
  2612                           wreg	equ	0xFE8
  2613                           indf2	equ	0xFDF
  2614                           postinc2	equ	0xFDE
  2615                           postdec2	equ	0xFDD
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _Lcd_Init *****************
  2621 ;; Defined at:
  2622 ;;		line 71 in file "i2c_display.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;Total ram usage:        1 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    6
  2643 ;; This function calls:
  2644 ;;		_Lcd_Cmd
  2645 ;;		_Lcd_Port
  2646 ;; This function is called by:
  2647 ;;		_config
  2648 ;; This function uses a non-reentrant model
  2649 ;;
  2650                           
  2651                           	psect	text11
  2652  001694                     __ptext11:
  2653                           	opt stack 0
  2654  001694                     _Lcd_Init:
  2655                           	opt stack 23
  2656                           
  2657                           ;i2c_display.c: 73: Lcd_Port(0x00);
  2658                           
  2659                           ;incstack = 0
  2660  001694  0E00               	movlw	0
  2661  001696  ECE0  F00C         	call	_Lcd_Port
  2662                           
  2663                           ;i2c_display.c: 74: _delay((unsigned long)((20)*(16000000/4000.0)));
  2664  00169A  0E68               	movlw	104
  2665  00169C  0100               	movlb	0	; () banked
  2666  00169E  6F68               	movwf	??_Lcd_Init& (0+255),b
  2667  0016A0  0EE4               	movlw	228
  2668  0016A2                     u1557:
  2669  0016A2  2EE8               	decfsz	wreg,f,c
  2670  0016A4  D7FE               	bra	u1557
  2671  0016A6  2F68               	decfsz	??_Lcd_Init& (0+255),f,b
  2672  0016A8  D7FC               	bra	u1557
  2673  0016AA  F000               	nop	
  2674                           
  2675                           ;i2c_display.c: 75: Lcd_Cmd(0x03);
  2676  0016AC  0E03               	movlw	3
  2677  0016AE  ECE9  F00B         	call	_Lcd_Cmd
  2678                           
  2679                           ;i2c_display.c: 76: _delay((unsigned long)((5)*(16000000/4000.0)));
  2680  0016B2  0E1A               	movlw	26
  2681  0016B4  0100               	movlb	0	; () banked
  2682  0016B6  6F68               	movwf	??_Lcd_Init& (0+255),b
  2683  0016B8  0EF8               	movlw	248
  2684  0016BA                     u1567:
  2685  0016BA  2EE8               	decfsz	wreg,f,c
  2686  0016BC  D7FE               	bra	u1567
  2687  0016BE  2F68               	decfsz	??_Lcd_Init& (0+255),f,b
  2688  0016C0  D7FC               	bra	u1567
  2689  0016C2  F000               	nop	
  2690                           
  2691                           ;i2c_display.c: 77: Lcd_Cmd(0x03);
  2692  0016C4  0E03               	movlw	3
  2693  0016C6  ECE9  F00B         	call	_Lcd_Cmd
  2694                           
  2695                           ;i2c_display.c: 78: _delay((unsigned long)((11)*(16000000/4000.0)));
  2696  0016CA  0E3A               	movlw	58
  2697  0016CC  0100               	movlb	0	; () banked
  2698  0016CE  6F68               	movwf	??_Lcd_Init& (0+255),b
  2699  0016D0  0E23               	movlw	35
  2700  0016D2                     u1577:
  2701  0016D2  2EE8               	decfsz	wreg,f,c
  2702  0016D4  D7FE               	bra	u1577
  2703  0016D6  2F68               	decfsz	??_Lcd_Init& (0+255),f,b
  2704  0016D8  D7FC               	bra	u1577
  2705                           
  2706                           ;i2c_display.c: 79: Lcd_Cmd(0x03);
  2707  0016DA  0E03               	movlw	3
  2708  0016DC  ECE9  F00B         	call	_Lcd_Cmd
  2709                           
  2710                           ;i2c_display.c: 81: Lcd_Cmd(0x02);
  2711  0016E0  0E02               	movlw	2
  2712  0016E2  ECE9  F00B         	call	_Lcd_Cmd
  2713                           
  2714                           ;i2c_display.c: 82: Lcd_Cmd(0x02);
  2715  0016E6  0E02               	movlw	2
  2716  0016E8  ECE9  F00B         	call	_Lcd_Cmd
  2717                           
  2718                           ;i2c_display.c: 83: Lcd_Cmd(0x08);
  2719  0016EC  0E08               	movlw	8
  2720  0016EE  ECE9  F00B         	call	_Lcd_Cmd
  2721                           
  2722                           ;i2c_display.c: 84: Lcd_Cmd(0x00);
  2723  0016F2  0E00               	movlw	0
  2724  0016F4  ECE9  F00B         	call	_Lcd_Cmd
  2725                           
  2726                           ;i2c_display.c: 85: Lcd_Cmd(0x0C);
  2727  0016F8  0E0C               	movlw	12
  2728  0016FA  ECE9  F00B         	call	_Lcd_Cmd
  2729                           
  2730                           ;i2c_display.c: 86: Lcd_Cmd(0x00);
  2731  0016FE  0E00               	movlw	0
  2732  001700  ECE9  F00B         	call	_Lcd_Cmd
  2733                           
  2734                           ;i2c_display.c: 87: Lcd_Cmd(0x06);
  2735  001704  0E06               	movlw	6
  2736  001706  ECE9  F00B         	call	_Lcd_Cmd
  2737  00170A  0012               	return		;funcret
  2738  00170C                     __end_of_Lcd_Init:
  2739                           	opt stack 0
  2740                           tblptru	equ	0xFF8
  2741                           tblptrh	equ	0xFF7
  2742                           tblptrl	equ	0xFF6
  2743                           tablat	equ	0xFF5
  2744                           prodh	equ	0xFF4
  2745                           prodl	equ	0xFF3
  2746                           intcon	equ	0xFF2
  2747                           intcon2	equ	0xFF1
  2748                           intcon3	equ	0xFF0
  2749                           indf0	equ	0xFEF
  2750                           postinc0	equ	0xFEE
  2751                           fsr0h	equ	0xFEA
  2752                           fsr0l	equ	0xFE9
  2753                           wreg	equ	0xFE8
  2754                           indf2	equ	0xFDF
  2755                           postinc2	equ	0xFDE
  2756                           postdec2	equ	0xFDD
  2757                           fsr2h	equ	0xFDA
  2758                           fsr2l	equ	0xFD9
  2759                           status	equ	0xFD8
  2760                           
  2761 ;; *************** function _Lcd_Clear *****************
  2762 ;; Defined at:
  2763 ;;		line 44 in file "i2c_display.c"
  2764 ;; Parameters:    Size  Location     Type
  2765 ;;		None
  2766 ;; Auto vars:     Size  Location     Type
  2767 ;;		None
  2768 ;; Return value:  Size  Location     Type
  2769 ;;                  1    wreg      void 
  2770 ;; Registers used:
  2771 ;;		wreg, status,2, status,0, cstack
  2772 ;; Tracked objects:
  2773 ;;		On entry : 0/0
  2774 ;;		On exit  : 0/0
  2775 ;;		Unchanged: 0/0
  2776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2781 ;;Total ram usage:        0 bytes
  2782 ;; Hardware stack levels used:    1
  2783 ;; Hardware stack levels required when called:    6
  2784 ;; This function calls:
  2785 ;;		_Lcd_Cmd
  2786 ;; This function is called by:
  2787 ;;		_config
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text12
  2792  001A40                     __ptext12:
  2793                           	opt stack 0
  2794  001A40                     _Lcd_Clear:
  2795                           	opt stack 23
  2796                           
  2797                           ;i2c_display.c: 46: Lcd_Cmd(0);
  2798                           
  2799                           ;incstack = 0
  2800  001A40  0E00               	movlw	0
  2801  001A42  ECE9  F00B         	call	_Lcd_Cmd
  2802                           
  2803                           ;i2c_display.c: 47: Lcd_Cmd(1);
  2804  001A46  0E01               	movlw	1
  2805  001A48  ECE9  F00B         	call	_Lcd_Cmd
  2806  001A4C  0012               	return		;funcret
  2807  001A4E                     __end_of_Lcd_Clear:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon	equ	0xFF2
  2816                           intcon2	equ	0xFF1
  2817                           intcon3	equ	0xFF0
  2818                           indf0	equ	0xFEF
  2819                           postinc0	equ	0xFEE
  2820                           fsr0h	equ	0xFEA
  2821                           fsr0l	equ	0xFE9
  2822                           wreg	equ	0xFE8
  2823                           indf2	equ	0xFDF
  2824                           postinc2	equ	0xFDE
  2825                           postdec2	equ	0xFDD
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _I2C_Master_Init *****************
  2831 ;; Defined at:
  2832 ;;		line 164 in file "i2c_display.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  c               4   13[BANK0 ] const unsigned long 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;		None
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2, status,0, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2846 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;Total ram usage:        8 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    3
  2853 ;; This function calls:
  2854 ;;		___lldiv
  2855 ;; This function is called by:
  2856 ;;		_config
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text13
  2861  001774                     __ptext13:
  2862                           	opt stack 0
  2863  001774                     _I2C_Master_Init:
  2864                           	opt stack 26
  2865                           
  2866                           ;i2c_display.c: 166: SSP1CON1 = 0b00101000;
  2867                           
  2868                           ;incstack = 0
  2869  001774  0E28               	movlw	40
  2870  001776  6EC6               	movwf	4038,c	;volatile
  2871                           
  2872                           ;i2c_display.c: 167: SSP1CON2 = 0x00;
  2873  001778  0E00               	movlw	0
  2874  00177A  6EC5               	movwf	4037,c	;volatile
  2875                           
  2876                           ;i2c_display.c: 168: SSP1ADD = (16000000/(4*c))-1;
  2877  00177C  0E00               	movlw	0
  2878  00177E  0100               	movlb	0	; () banked
  2879  001780  6F60               	movwf	___lldiv@dividend& (0+255),b
  2880  001782  0E24               	movlw	36
  2881  001784  6F61               	movwf	(___lldiv@dividend+1)& (0+255),b
  2882  001786  0EF4               	movlw	244
  2883  001788  6F62               	movwf	(___lldiv@dividend+2)& (0+255),b
  2884  00178A  0E00               	movlw	0
  2885  00178C  6F63               	movwf	(___lldiv@dividend+3)& (0+255),b
  2886  00178E  C06D  F071         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  2887  001792  C06E  F072         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  2888  001796  C06F  F073         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  2889  00179A  C070  F074         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  2890  00179E  0E02               	movlw	2
  2891  0017A0                     u1125:
  2892  0017A0  90D8               	bcf	status,0,c
  2893  0017A2  3771               	rlcf	??_I2C_Master_Init& (0+255),f,b
  2894  0017A4  3772               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  2895  0017A6  3773               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  2896  0017A8  3774               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  2897  0017AA  2EE8               	decfsz	wreg,f,c
  2898  0017AC  D7F9               	goto	u1125
  2899  0017AE  C071  F064         	movff	??_I2C_Master_Init,___lldiv@divisor
  2900  0017B2  C072  F065         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  2901  0017B6  C073  F066         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  2902  0017BA  C074  F067         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  2903  0017BE  EC49  F00A         	call	___lldiv	;wreg free
  2904  0017C2  0100               	movlb	0	; () banked
  2905  0017C4  0560               	decf	?___lldiv& (0+255),w,b
  2906  0017C6  6EC8               	movwf	4040,c	;volatile
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;i2c_display.c: 169: SSP1STAT = 0x00;
  2910  0017C8  0E00               	movlw	0
  2911  0017CA  6EC7               	movwf	4039,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;i2c_display.c: 170: TRISCbits.TRISC3=1;
  2915  0017CC  8694               	bsf	3988,3,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;i2c_display.c: 171: TRISCbits.TRISC4=1;
  2919  0017CE  8894               	bsf	3988,4,c	;volatile
  2920                           
  2921                           ; BSR set to: 0
  2922  0017D0  0012               	return		;funcret
  2923  0017D2                     __end_of_I2C_Master_Init:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           prodh	equ	0xFF4
  2930                           prodl	equ	0xFF3
  2931                           intcon	equ	0xFF2
  2932                           intcon2	equ	0xFF1
  2933                           intcon3	equ	0xFF0
  2934                           indf0	equ	0xFEF
  2935                           postinc0	equ	0xFEE
  2936                           fsr0h	equ	0xFEA
  2937                           fsr0l	equ	0xFE9
  2938                           wreg	equ	0xFE8
  2939                           indf2	equ	0xFDF
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function ___lldiv *****************
  2947 ;; Defined at:
  2948 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  dividend        4    0[BANK0 ] unsigned long 
  2951 ;;  divisor         4    4[BANK0 ] unsigned long 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  quotient        4    8[BANK0 ] unsigned long 
  2954 ;;  counter         1   12[BANK0 ] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  4    0[BANK0 ] unsigned long 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2965 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;Total ram usage:       13 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    2
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_I2C_Master_Init
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text14
  2979  001492                     __ptext14:
  2980                           	opt stack 0
  2981  001492                     ___lldiv:
  2982                           	opt stack 26
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;incstack = 0
  2986  001492  0E00               	movlw	0
  2987  001494  0100               	movlb	0	; () banked
  2988  001496  6F68               	movwf	___lldiv@quotient& (0+255),b
  2989  001498  0E00               	movlw	0
  2990  00149A  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  2991  00149C  0E00               	movlw	0
  2992  00149E  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  2993  0014A0  0E00               	movlw	0
  2994  0014A2  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997  0014A4  5164               	movf	___lldiv@divisor& (0+255),w,b
  2998  0014A6  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2999  0014A8  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3000  0014AA  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3001  0014AC  B4D8               	btfsc	status,2,c
  3002  0014AE  D02A               	goto	l685
  3003                           
  3004                           ; BSR set to: 0
  3005  0014B0  0E01               	movlw	1
  3006  0014B2  6F6C               	movwf	___lldiv@counter& (0+255),b
  3007  0014B4  D006               	goto	l680
  3008  0014B6                     
  3009                           ; BSR set to: 0
  3010                           
  3011                           ; BSR set to: 0
  3012  0014B6  90D8               	bcf	status,0,c
  3013  0014B8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  3014  0014BA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3015  0014BC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3016  0014BE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3017  0014C0  2B6C               	incf	___lldiv@counter& (0+255),f,b
  3018  0014C2                     l680:
  3019                           
  3020                           ; BSR set to: 0
  3021                           
  3022                           ; BSR set to: 0
  3023  0014C2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3024  0014C4  D7F8               	goto	l681
  3025  0014C6                     u1100:
  3026                           
  3027                           ; BSR set to: 0
  3028                           
  3029                           ; BSR set to: 0
  3030                           
  3031                           ; BSR set to: 0
  3032  0014C6  90D8               	bcf	status,0,c
  3033  0014C8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  3034  0014CA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3035  0014CC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3036  0014CE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3037                           
  3038                           ; BSR set to: 0
  3039  0014D0  5164               	movf	___lldiv@divisor& (0+255),w,b
  3040  0014D2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  3041  0014D4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3042  0014D6  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3043  0014D8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3044  0014DA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3045  0014DC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3046  0014DE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3047  0014E0  A0D8               	btfss	status,0,c
  3048  0014E2  D009               	goto	l684
  3049                           
  3050                           ; BSR set to: 0
  3051  0014E4  5164               	movf	___lldiv@divisor& (0+255),w,b
  3052  0014E6  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  3053  0014E8  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3054  0014EA  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3055  0014EC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3056  0014EE  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3057  0014F0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3058  0014F2  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3059                           
  3060                           ; BSR set to: 0
  3061  0014F4  8168               	bsf	___lldiv@quotient& (0+255),0,b
  3062  0014F6                     l684:
  3063                           
  3064                           ; BSR set to: 0
  3065                           
  3066                           ; BSR set to: 0
  3067  0014F6  90D8               	bcf	status,0,c
  3068  0014F8  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3069  0014FA  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3070  0014FC  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3071  0014FE  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  3072                           
  3073                           ; BSR set to: 0
  3074  001500  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  3075  001502  D7E1               	goto	u1100
  3076  001504                     l685:
  3077                           
  3078                           ; BSR set to: 0
  3079                           
  3080                           ; BSR set to: 0
  3081  001504  C068  F060         	movff	___lldiv@quotient,?___lldiv
  3082  001508  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  3083  00150C  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  3084  001510  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  3085                           
  3086                           ; BSR set to: 0
  3087  001514  0012               	return		;funcret
  3088  001516                     __end_of___lldiv:
  3089                           	opt stack 0
  3090                           tblptru	equ	0xFF8
  3091                           tblptrh	equ	0xFF7
  3092                           tblptrl	equ	0xFF6
  3093                           tablat	equ	0xFF5
  3094                           prodh	equ	0xFF4
  3095                           prodl	equ	0xFF3
  3096                           intcon	equ	0xFF2
  3097                           intcon2	equ	0xFF1
  3098                           intcon3	equ	0xFF0
  3099                           indf0	equ	0xFEF
  3100                           postinc0	equ	0xFEE
  3101                           fsr0h	equ	0xFEA
  3102                           fsr0l	equ	0xFE9
  3103                           wreg	equ	0xFE8
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _Cursor_Off *****************
  3112 ;; Defined at:
  3113 ;;		line 139 in file "i2c_display.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;		None
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;		None
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, status,2, status,0, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;Total ram usage:        0 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    6
  3134 ;; This function calls:
  3135 ;;		_Lcd_Cmd
  3136 ;; This function is called by:
  3137 ;;		_config
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text15
  3142  001A4E                     __ptext15:
  3143                           	opt stack 0
  3144  001A4E                     _Cursor_Off:
  3145                           	opt stack 23
  3146                           
  3147                           ;i2c_display.c: 141: Lcd_Cmd(0x00);
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;incstack = 0
  3151  001A4E  0E00               	movlw	0
  3152  001A50  ECE9  F00B         	call	_Lcd_Cmd
  3153                           
  3154                           ;i2c_display.c: 142: Lcd_Cmd(0x0C);
  3155  001A54  0E0C               	movlw	12
  3156  001A56  ECE9  F00B         	call	_Lcd_Cmd
  3157  001A5A  0012               	return		;funcret
  3158  001A5C                     __end_of_Cursor_Off:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           intcon	equ	0xFF2
  3167                           intcon2	equ	0xFF1
  3168                           intcon3	equ	0xFF0
  3169                           indf0	equ	0xFEF
  3170                           postinc0	equ	0xFEE
  3171                           fsr0h	equ	0xFEA
  3172                           fsr0l	equ	0xFE9
  3173                           wreg	equ	0xFE8
  3174                           indf2	equ	0xFDF
  3175                           postinc2	equ	0xFDE
  3176                           postdec2	equ	0xFDD
  3177                           fsr2h	equ	0xFDA
  3178                           fsr2l	equ	0xFD9
  3179                           status	equ	0xFD8
  3180                           
  3181 ;; *************** function _Lcd_Cmd *****************
  3182 ;; Defined at:
  3183 ;;		line 25 in file "i2c_display.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  a               1    wreg     unsigned char 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  a               1    7[BANK0 ] unsigned char 
  3188 ;;  buff            2    5[BANK0 ] int 
  3189 ;; Return value:  Size  Location     Type
  3190 ;;                  1    wreg      void 
  3191 ;; Registers used:
  3192 ;;		wreg, status,2, status,0, cstack
  3193 ;; Tracked objects:
  3194 ;;		On entry : 0/0
  3195 ;;		On exit  : 0/0
  3196 ;;		Unchanged: 0/0
  3197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3202 ;;Total ram usage:        6 bytes
  3203 ;; Hardware stack levels used:    1
  3204 ;; Hardware stack levels required when called:    5
  3205 ;; This function calls:
  3206 ;;		_Lcd_Port
  3207 ;; This function is called by:
  3208 ;;		_Lcd_Clear
  3209 ;;		_Lcd_Set_Cursor
  3210 ;;		_Lcd_Init
  3211 ;;		_Cursor_Off
  3212 ;;		_Lcd_Shift_Right
  3213 ;;		_Lcd_Shift_Left
  3214 ;;		_Cursor_On
  3215 ;;		_Cursor_Left
  3216 ;;		_Cursor_Right
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text16
  3221  0017D2                     __ptext16:
  3222                           	opt stack 0
  3223  0017D2                     _Lcd_Cmd:
  3224                           	opt stack 23
  3225                           
  3226                           ;incstack = 0
  3227                           ;Lcd_Cmd@a stored from wreg
  3228  0017D2  0100               	movlb	0	; () banked
  3229  0017D4  6F67               	movwf	Lcd_Cmd@a& (0+255),b
  3230                           
  3231                           ;i2c_display.c: 27: int buff;
  3232                           ;i2c_display.c: 28: a=a<<4;
  3233  0017D6  0100               	movlb	0	; () banked
  3234  0017D8  3967               	swapf	Lcd_Cmd@a& (0+255),w,b
  3235  0017DA  0BF0               	andlw	240
  3236  0017DC  6F67               	movwf	Lcd_Cmd@a& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;i2c_display.c: 31: Lcd_Port(0x00 || 0x00 || 0x00 || 0x00);
  3240  0017DE  0E01               	movlw	1
  3241  0017E0  6F64               	movwf	_Lcd_Cmd$654& (0+255),b
  3242                           
  3243                           ; BSR set to: 0
  3244  0017E2  0E00               	movlw	0
  3245  0017E4  6F64               	movwf	_Lcd_Cmd$654& (0+255),b
  3246                           
  3247                           ; BSR set to: 0
  3248                           
  3249                           ; BSR set to: 0
  3250  0017E6  5164               	movf	_Lcd_Cmd$654& (0+255),w,b
  3251  0017E8  ECE0  F00C         	call	_Lcd_Port
  3252                           
  3253                           ;i2c_display.c: 33: Lcd_Port(a);
  3254  0017EC  0100               	movlb	0	; () banked
  3255  0017EE  5167               	movf	Lcd_Cmd@a& (0+255),w,b
  3256  0017F0  ECE0  F00C         	call	_Lcd_Port
  3257                           
  3258                           ;i2c_display.c: 36: buff=a | 0x00 | 0x04 | 0x00;
  3259  0017F4  0E04               	movlw	4
  3260  0017F6  C067  F062         	movff	Lcd_Cmd@a,??_Lcd_Cmd
  3261  0017FA  0100               	movlb	0	; () banked
  3262  0017FC  6B63               	clrf	(??_Lcd_Cmd+1)& (0+255),b
  3263  0017FE  1162               	iorwf	??_Lcd_Cmd& (0+255),w,b
  3264  001800  6F65               	movwf	Lcd_Cmd@buff& (0+255),b
  3265  001802  5163               	movf	(??_Lcd_Cmd+1)& (0+255),w,b
  3266  001804  6F66               	movwf	(Lcd_Cmd@buff+1)& (0+255),b
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;i2c_display.c: 37: Lcd_Port(buff);
  3270  001806  5165               	movf	Lcd_Cmd@buff& (0+255),w,b
  3271  001808  ECE0  F00C         	call	_Lcd_Port
  3272                           
  3273                           ;i2c_display.c: 38: _delay((unsigned long)((4)*(16000000/4000.0)));
  3274  00180C  0E15               	movlw	21
  3275  00180E  0100               	movlb	0	; () banked
  3276  001810  6F62               	movwf	??_Lcd_Cmd& (0+255),b
  3277  001812  0EC6               	movlw	198
  3278  001814                     u1587:
  3279  001814  2EE8               	decfsz	wreg,f,c
  3280  001816  D7FE               	bra	u1587
  3281  001818  2F62               	decfsz	??_Lcd_Cmd& (0+255),f,b
  3282  00181A  D7FC               	bra	u1587
  3283  00181C  F000               	nop	
  3284                           
  3285                           ;i2c_display.c: 40: buff=a | 0x00 | 0x00 | 0x00;
  3286  00181E  C067  F065         	movff	Lcd_Cmd@a,Lcd_Cmd@buff
  3287  001822  0100               	movlb	0	; () banked
  3288  001824  6B66               	clrf	(Lcd_Cmd@buff+1)& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;i2c_display.c: 41: Lcd_Port(buff);
  3292  001826  5165               	movf	Lcd_Cmd@buff& (0+255),w,b
  3293  001828  ECE0  F00C         	call	_Lcd_Port
  3294  00182C  0012               	return		;funcret
  3295  00182E                     __end_of_Lcd_Cmd:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon2	equ	0xFF1
  3305                           intcon3	equ	0xFF0
  3306                           indf0	equ	0xFEF
  3307                           postinc0	equ	0xFEE
  3308                           fsr0h	equ	0xFEA
  3309                           fsr0l	equ	0xFE9
  3310                           wreg	equ	0xFE8
  3311                           indf2	equ	0xFDF
  3312                           postinc2	equ	0xFDE
  3313                           postdec2	equ	0xFDD
  3314                           fsr2h	equ	0xFDA
  3315                           fsr2l	equ	0xFD9
  3316                           status	equ	0xFD8
  3317                           
  3318 ;; *************** function _Lcd_Port *****************
  3319 ;; Defined at:
  3320 ;;		line 19 in file "i2c_display.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  data            1    wreg     unsigned char 
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;  data            1   32[COMRAM] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;Total ram usage:        1 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    4
  3341 ;; This function calls:
  3342 ;;		_I2C_Master_Start
  3343 ;;		_I2C_Master_Stop
  3344 ;;		_I2C_Write_Display
  3345 ;; This function is called by:
  3346 ;;		_Lcd_Cmd
  3347 ;;		_Lcd_Init
  3348 ;;		_Lcd_Write_Char
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text17
  3353  0019C0                     __ptext17:
  3354                           	opt stack 0
  3355  0019C0                     _Lcd_Port:
  3356                           	opt stack 23
  3357                           
  3358                           ;incstack = 0
  3359                           ;Lcd_Port@data stored from wreg
  3360  0019C0  6E21               	movwf	Lcd_Port@data,c
  3361  0019C2  EC37  F00D         	call	_I2C_Master_Start	;wreg free
  3362                           
  3363                           ;i2c_display.c: 21: I2C_Write_Display(0x70);
  3364  0019C6  0E00               	movlw	0
  3365  0019C8  0100               	movlb	0	; () banked
  3366  0019CA  6F61               	movwf	(I2C_Write_Display@d+1)& (0+255),b
  3367  0019CC  0E70               	movlw	112
  3368  0019CE  6F60               	movwf	I2C_Write_Display@d& (0+255),b
  3369  0019D0  EC2E  F00D         	call	_I2C_Write_Display	;wreg free
  3370                           
  3371                           ;i2c_display.c: 22: I2C_Write_Display(data);
  3372  0019D4  C021  F060         	movff	Lcd_Port@data,I2C_Write_Display@d
  3373  0019D8  0100               	movlb	0	; () banked
  3374  0019DA  6B61               	clrf	(I2C_Write_Display@d+1)& (0+255),b
  3375  0019DC  EC2E  F00D         	call	_I2C_Write_Display	;wreg free
  3376                           
  3377                           ;i2c_display.c: 23: I2C_Master_Stop();
  3378  0019E0  EC33  F00D         	call	_I2C_Master_Stop	;wreg free
  3379  0019E4  0012               	return		;funcret
  3380  0019E6                     __end_of_Lcd_Port:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           prodh	equ	0xFF4
  3387                           prodl	equ	0xFF3
  3388                           intcon	equ	0xFF2
  3389                           intcon2	equ	0xFF1
  3390                           intcon3	equ	0xFF0
  3391                           indf0	equ	0xFEF
  3392                           postinc0	equ	0xFEE
  3393                           fsr0h	equ	0xFEA
  3394                           fsr0l	equ	0xFE9
  3395                           wreg	equ	0xFE8
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _I2C_Write_Display *****************
  3404 ;; Defined at:
  3405 ;;		line 205 in file "i2c_display.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  d               2    0[BANK0 ] unsigned int 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, status,2, status,0, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3419 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;Total ram usage:        2 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    3
  3426 ;; This function calls:
  3427 ;;		_I2C_Master_Wait
  3428 ;; This function is called by:
  3429 ;;		_Lcd_Port
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text18
  3434  001A5C                     __ptext18:
  3435                           	opt stack 0
  3436  001A5C                     _I2C_Write_Display:
  3437                           	opt stack 23
  3438                           
  3439                           ;i2c_display.c: 207: I2C_Master_Wait();
  3440                           
  3441                           ;incstack = 0
  3442  001A5C  EC17  F00D         	call	_I2C_Master_Wait	;wreg free
  3443                           
  3444                           ;i2c_display.c: 208: SSP1BUF = d;
  3445  001A60  C060  FFC9         	movff	I2C_Write_Display@d,4041	;volatile
  3446  001A64  0012               	return		;funcret
  3447  001A66                     __end_of_I2C_Write_Display:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           prodh	equ	0xFF4
  3454                           prodl	equ	0xFF3
  3455                           intcon	equ	0xFF2
  3456                           intcon2	equ	0xFF1
  3457                           intcon3	equ	0xFF0
  3458                           indf0	equ	0xFEF
  3459                           postinc0	equ	0xFEE
  3460                           fsr0h	equ	0xFEA
  3461                           fsr0l	equ	0xFE9
  3462                           wreg	equ	0xFE8
  3463                           indf2	equ	0xFDF
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _I2C_Master_Stop *****************
  3471 ;; Defined at:
  3472 ;;		line 193 in file "i2c_display.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    3
  3493 ;; This function calls:
  3494 ;;		_I2C_Master_Wait
  3495 ;; This function is called by:
  3496 ;;		_Lcd_Port
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text19
  3501  001A66                     __ptext19:
  3502                           	opt stack 0
  3503  001A66                     _I2C_Master_Stop:
  3504                           	opt stack 23
  3505                           
  3506                           ;i2c_display.c: 195: I2C_Master_Wait();
  3507                           
  3508                           ;incstack = 0
  3509  001A66  EC17  F00D         	call	_I2C_Master_Wait	;wreg free
  3510                           
  3511                           ;i2c_display.c: 196: SSP1CON2bits.PEN = 1;
  3512  001A6A  84C5               	bsf	4037,2,c	;volatile
  3513  001A6C  0012               	return		;funcret
  3514  001A6E                     __end_of_I2C_Master_Stop:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           intcon2	equ	0xFF1
  3524                           intcon3	equ	0xFF0
  3525                           indf0	equ	0xFEF
  3526                           postinc0	equ	0xFEE
  3527                           fsr0h	equ	0xFEA
  3528                           fsr0l	equ	0xFE9
  3529                           wreg	equ	0xFE8
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _I2C_Master_Start *****************
  3538 ;; Defined at:
  3539 ;;		line 181 in file "i2c_display.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;		None
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;		None
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;Total ram usage:        0 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    3
  3560 ;; This function calls:
  3561 ;;		_I2C_Master_Wait
  3562 ;; This function is called by:
  3563 ;;		_Lcd_Port
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text20
  3568  001A6E                     __ptext20:
  3569                           	opt stack 0
  3570  001A6E                     _I2C_Master_Start:
  3571                           	opt stack 23
  3572                           
  3573                           ;i2c_display.c: 183: I2C_Master_Wait();
  3574                           
  3575                           ;incstack = 0
  3576  001A6E  EC17  F00D         	call	_I2C_Master_Wait	;wreg free
  3577                           
  3578                           ;i2c_display.c: 184: SSP1CON2bits.SEN = 1;
  3579  001A72  80C5               	bsf	4037,0,c	;volatile
  3580  001A74  0012               	return		;funcret
  3581  001A76                     __end_of_I2C_Master_Start:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           intcon2	equ	0xFF1
  3591                           intcon3	equ	0xFF0
  3592                           indf0	equ	0xFEF
  3593                           postinc0	equ	0xFEE
  3594                           fsr0h	equ	0xFEA
  3595                           fsr0l	equ	0xFE9
  3596                           wreg	equ	0xFE8
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           postdec2	equ	0xFDD
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _I2C_Master_Wait *****************
  3605 ;; Defined at:
  3606 ;;		line 174 in file "i2c_display.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;Total ram usage:        1 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    2
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_I2C_Master_Start
  3631 ;;		_I2C_Master_Stop
  3632 ;;		_I2C_Write_Display
  3633 ;;		_I2C_Master_RepeatedStart
  3634 ;;		_I2C_Master_Write
  3635 ;;		_I2C_Master_Read
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text21
  3640  001A2E                     __ptext21:
  3641                           	opt stack 0
  3642  001A2E                     _I2C_Master_Wait:
  3643                           	opt stack 23
  3644                           
  3645                           ;i2c_display.c: 176: while ((SSP1STAT & 0x04) || (SSP1CON2 & 0x1F));
  3646                           
  3647                           ;incstack = 0
  3648  001A2E  B4C7               	btfsc	4039,2,c	;volatile
  3649  001A30  D7FE               	goto	_I2C_Master_Wait
  3650  001A32  CFC5 F020          	movff	4037,??_I2C_Master_Wait	;volatile
  3651  001A36  0E1F               	movlw	31
  3652  001A38  1620               	andwf	??_I2C_Master_Wait,f,c
  3653  001A3A  B4D8               	btfsc	status,2,c
  3654  001A3C  0012               	return	
  3655  001A3E  D7F7               	goto	_I2C_Master_Wait
  3656  001A40                     __end_of_I2C_Master_Wait:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           intcon3	equ	0xFF0
  3667                           indf0	equ	0xFEF
  3668                           postinc0	equ	0xFEE
  3669                           fsr0h	equ	0xFEA
  3670                           fsr0l	equ	0xFE9
  3671                           wreg	equ	0xFE8
  3672                           indf2	equ	0xFDF
  3673                           postinc2	equ	0xFDE
  3674                           postdec2	equ	0xFDD
  3675                           fsr2h	equ	0xFDA
  3676                           fsr2l	equ	0xFD9
  3677                           status	equ	0xFD8
  3678                           
  3679 ;; *************** function _ISR *****************
  3680 ;; Defined at:
  3681 ;;		line 94 in file "main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;Total ram usage:       18 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    1
  3702 ;; This function calls:
  3703 ;;		i2___lldiv
  3704 ;;		i2___lwdiv
  3705 ;;		i2___wmul
  3706 ;; This function is called by:
  3707 ;;		Interrupt level 2
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	intcode
  3712  000008                     __pintcode:
  3713                           	opt stack 0
  3714  000008                     _ISR:
  3715                           	opt stack 23
  3716                           
  3717                           ;incstack = 0
  3718  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3719  00000A  CFFA F00E          	movff	pclath,??_ISR
  3720  00000E  CFFB F00F          	movff	pclatu,??_ISR+1
  3721  000012  CFE9 F010          	movff	fsr0l,??_ISR+2
  3722  000016  CFEA F011          	movff	fsr0h,??_ISR+3
  3723  00001A  CFE1 F012          	movff	fsr1l,??_ISR+4
  3724  00001E  CFE2 F013          	movff	fsr1h,??_ISR+5
  3725  000022  CFD9 F014          	movff	fsr2l,??_ISR+6
  3726  000026  CFDA F015          	movff	fsr2h,??_ISR+7
  3727  00002A  CFF3 F016          	movff	prodl,??_ISR+8
  3728  00002E  CFF4 F017          	movff	prodh,??_ISR+9
  3729  000032  CFF6 F018          	movff	tblptrl,??_ISR+10
  3730  000036  CFF7 F019          	movff	tblptrh,??_ISR+11
  3731  00003A  CFF8 F01A          	movff	tblptru,??_ISR+12
  3732  00003E  CFF5 F01B          	movff	tablat,??_ISR+13
  3733  000042  C040  F01C         	movff	btemp,??_ISR+14
  3734  000046  C041  F01D         	movff	btemp+1,??_ISR+15
  3735  00004A  C042  F01E         	movff	btemp+2,??_ISR+16
  3736  00004E  C043  F01F         	movff	btemp+3,??_ISR+17
  3737                           
  3738                           ;main.c: 96: INTCONbits.PEIE=0;
  3739  000052  9CF2               	bcf	intcon,6,c	;volatile
  3740                           
  3741                           ;main.c: 99: if(INTCONbits.RBIF==1 && contor==1 )
  3742  000054  A0F2               	btfss	intcon,0,c	;volatile
  3743  000056  D04C               	goto	i2l257
  3744  000058  042E               	decf	_contor,w,c
  3745  00005A  102F               	iorwf	_contor+1,w,c
  3746  00005C  A4D8               	btfss	status,2,c
  3747  00005E  D048               	goto	i2l257
  3748                           
  3749                           ;main.c: 100: {
  3750                           ;main.c: 103: cor=PORTB;
  3751  000060  CF81 F034          	movff	3969,_cor	;volatile
  3752  000064  6A35               	clrf	_cor+1,c
  3753  000066  A881               	btfss	3969,4,c	;volatile
  3754  000068  D7FE               	goto	i2l259
  3755                           
  3756                           ;main.c: 105: {
  3757                           ;main.c: 106: TMR1H=TMR1L=0X00;
  3758  00006A  0E00               	movlw	0
  3759  00006C  6ECE               	movwf	4046,c	;volatile
  3760  00006E  CFCE FFCF          	movff	4046,4047	;volatile
  3761                           
  3762                           ;main.c: 107: T1CONbits.TMR1ON=1;
  3763  000072  80CD               	bsf	4045,0,c	;volatile
  3764  000074  B881               	btfsc	3969,4,c	;volatile
  3765  000076  D7FE               	goto	i2l262
  3766                           
  3767                           ;main.c: 111: {
  3768                           ;main.c: 112: T1CONbits.TMR1ON=0;
  3769  000078  90CD               	bcf	4045,0,c	;volatile
  3770                           
  3771                           ;main.c: 114: TMR = (unsigned int) TMR1H << 8;
  3772  00007A  50CF               	movf	4047,w,c	;volatile
  3773  00007C  6E31               	movwf	_TMR+1,c
  3774  00007E  6A30               	clrf	_TMR,c
  3775                           
  3776                           ;main.c: 115: TMR = TMR + TMR1L;
  3777  000080  50CE               	movf	4046,w,c	;volatile
  3778  000082  2430               	addwf	_TMR,w,c
  3779  000084  6E30               	movwf	_TMR,c
  3780  000086  0E00               	movlw	0
  3781  000088  2031               	addwfc	_TMR+1,w,c
  3782  00008A  6E31               	movwf	_TMR+1,c
  3783                           
  3784                           ;main.c: 117: timp_us = (TMR/10) * 20;
  3785  00008C  0E00               	movlw	0
  3786  00008E  6E04               	movwf	i2___lwdiv@divisor+1,c
  3787  000090  0E0A               	movlw	10
  3788  000092  6E03               	movwf	i2___lwdiv@divisor,c
  3789  000094  C030  F001         	movff	_TMR,i2___lwdiv@dividend
  3790  000098  C031  F002         	movff	_TMR+1,i2___lwdiv@dividend+1
  3791  00009C  EC6E  F00C         	call	i2___lwdiv	;wreg free
  3792  0000A0  C001  F008         	movff	?i2___lwdiv,i2___wmul@multiplier
  3793  0000A4  C002  F009         	movff	?i2___lwdiv+1,i2___wmul@multiplier+1
  3794  0000A8  0E00               	movlw	0
  3795  0000AA  6E0B               	movwf	i2___wmul@multiplicand+1,c
  3796  0000AC  0E14               	movlw	20
  3797  0000AE  6E0A               	movwf	i2___wmul@multiplicand,c
  3798  0000B0  ECF3  F00C         	call	i2___wmul	;wreg free
  3799  0000B4  C008  F022         	movff	?i2___wmul,_timp_us
  3800  0000B8  C009  F023         	movff	?i2___wmul+1,_timp_us+1
  3801  0000BC  6A24               	clrf	_timp_us+2,c
  3802  0000BE  6A25               	clrf	_timp_us+3,c
  3803                           
  3804                           ;main.c: 118: distanta_dreapta = (timp_us / 58)+1 ;
  3805  0000C0  C022  F001         	movff	_timp_us,i2___lldiv@dividend
  3806  0000C4  C023  F002         	movff	_timp_us+1,i2___lldiv@dividend+1
  3807  0000C8  C024  F003         	movff	_timp_us+2,i2___lldiv@dividend+2
  3808  0000CC  C025  F004         	movff	_timp_us+3,i2___lldiv@dividend+3
  3809  0000D0  0E3A               	movlw	58
  3810  0000D2  6E05               	movwf	i2___lldiv@divisor,c
  3811  0000D4  0E00               	movlw	0
  3812  0000D6  6E06               	movwf	i2___lldiv@divisor+1,c
  3813  0000D8  0E00               	movlw	0
  3814  0000DA  6E07               	movwf	i2___lldiv@divisor+2,c
  3815  0000DC  0E00               	movlw	0
  3816  0000DE  6E08               	movwf	i2___lldiv@divisor+3,c
  3817  0000E0  EC8B  F00A         	call	i2___lldiv	;wreg free
  3818  0000E4  0E01               	movlw	1
  3819  0000E6  2401               	addwf	?i2___lldiv,w,c
  3820  0000E8  6E36               	movwf	_distanta_dreapta,c
  3821  0000EA  0E00               	movlw	0
  3822  0000EC  2002               	addwfc	?i2___lldiv+1,w,c
  3823  0000EE  6E37               	movwf	_distanta_dreapta+1,c
  3824  0000F0                     i2l257:
  3825                           
  3826                           ;main.c: 121: }
  3827                           ;main.c: 123: }
  3828                           ;main.c: 129: if(INTCONbits.RBIF==1 && contor==2 )
  3829  0000F0  A0F2               	btfss	intcon,0,c	;volatile
  3830  0000F2  D04D               	goto	i2l264
  3831  0000F4  0E02               	movlw	2
  3832  0000F6  182E               	xorwf	_contor,w,c
  3833  0000F8  102F               	iorwf	_contor+1,w,c
  3834  0000FA  A4D8               	btfss	status,2,c
  3835  0000FC  D048               	goto	i2l264
  3836                           
  3837                           ;main.c: 130: {
  3838                           ;main.c: 133: cor=PORTB;
  3839  0000FE  CF81 F034          	movff	3969,_cor	;volatile
  3840  000102  6A35               	clrf	_cor+1,c
  3841  000104  AA81               	btfss	3969,5,c	;volatile
  3842  000106  D7FE               	goto	i2l266
  3843                           
  3844                           ;main.c: 135: {
  3845                           ;main.c: 136: TMR1H=TMR1L=0X00;
  3846  000108  0E00               	movlw	0
  3847  00010A  6ECE               	movwf	4046,c	;volatile
  3848  00010C  CFCE FFCF          	movff	4046,4047	;volatile
  3849                           
  3850                           ;main.c: 137: T1CONbits.TMR1ON=1;
  3851  000110  80CD               	bsf	4045,0,c	;volatile
  3852  000112  BA81               	btfsc	3969,5,c	;volatile
  3853  000114  D7FE               	goto	i2l269
  3854                           
  3855                           ;main.c: 141: {
  3856                           ;main.c: 142: T1CONbits.TMR1ON=0;
  3857  000116  90CD               	bcf	4045,0,c	;volatile
  3858                           
  3859                           ;main.c: 144: TMR = (unsigned int) TMR1H << 8;
  3860  000118  50CF               	movf	4047,w,c	;volatile
  3861  00011A  6E31               	movwf	_TMR+1,c
  3862  00011C  6A30               	clrf	_TMR,c
  3863                           
  3864                           ;main.c: 145: TMR = TMR + TMR1L;
  3865  00011E  50CE               	movf	4046,w,c	;volatile
  3866  000120  2430               	addwf	_TMR,w,c
  3867  000122  6E30               	movwf	_TMR,c
  3868  000124  0E00               	movlw	0
  3869  000126  2031               	addwfc	_TMR+1,w,c
  3870  000128  6E31               	movwf	_TMR+1,c
  3871                           
  3872                           ;main.c: 147: timp_us = (TMR/10) * 20;
  3873  00012A  0E00               	movlw	0
  3874  00012C  6E04               	movwf	i2___lwdiv@divisor+1,c
  3875  00012E  0E0A               	movlw	10
  3876  000130  6E03               	movwf	i2___lwdiv@divisor,c
  3877  000132  C030  F001         	movff	_TMR,i2___lwdiv@dividend
  3878  000136  C031  F002         	movff	_TMR+1,i2___lwdiv@dividend+1
  3879  00013A  EC6E  F00C         	call	i2___lwdiv	;wreg free
  3880  00013E  C001  F008         	movff	?i2___lwdiv,i2___wmul@multiplier
  3881  000142  C002  F009         	movff	?i2___lwdiv+1,i2___wmul@multiplier+1
  3882  000146  0E00               	movlw	0
  3883  000148  6E0B               	movwf	i2___wmul@multiplicand+1,c
  3884  00014A  0E14               	movlw	20
  3885  00014C  6E0A               	movwf	i2___wmul@multiplicand,c
  3886  00014E  ECF3  F00C         	call	i2___wmul	;wreg free
  3887  000152  C008  F022         	movff	?i2___wmul,_timp_us
  3888  000156  C009  F023         	movff	?i2___wmul+1,_timp_us+1
  3889  00015A  6A24               	clrf	_timp_us+2,c
  3890  00015C  6A25               	clrf	_timp_us+3,c
  3891                           
  3892                           ;main.c: 148: distanta_fata = (timp_us / 58)+1 ;
  3893  00015E  C022  F001         	movff	_timp_us,i2___lldiv@dividend
  3894  000162  C023  F002         	movff	_timp_us+1,i2___lldiv@dividend+1
  3895  000166  C024  F003         	movff	_timp_us+2,i2___lldiv@dividend+2
  3896  00016A  C025  F004         	movff	_timp_us+3,i2___lldiv@dividend+3
  3897  00016E  0E3A               	movlw	58
  3898  000170  6E05               	movwf	i2___lldiv@divisor,c
  3899  000172  0E00               	movlw	0
  3900  000174  6E06               	movwf	i2___lldiv@divisor+1,c
  3901  000176  0E00               	movlw	0
  3902  000178  6E07               	movwf	i2___lldiv@divisor+2,c
  3903  00017A  0E00               	movlw	0
  3904  00017C  6E08               	movwf	i2___lldiv@divisor+3,c
  3905  00017E  EC8B  F00A         	call	i2___lldiv	;wreg free
  3906  000182  0E01               	movlw	1
  3907  000184  2401               	addwf	?i2___lldiv,w,c
  3908  000186  6E38               	movwf	_distanta_fata,c
  3909  000188  0E00               	movlw	0
  3910  00018A  2002               	addwfc	?i2___lldiv+1,w,c
  3911  00018C  6E39               	movwf	_distanta_fata+1,c
  3912  00018E                     i2l264:
  3913                           
  3914                           ;main.c: 150: }
  3915                           ;main.c: 152: }
  3916                           ;main.c: 158: if(INTCONbits.RBIF==1 && contor==3 )
  3917  00018E  A0F2               	btfss	intcon,0,c	;volatile
  3918  000190  D04D               	goto	i2l271
  3919  000192  0E03               	movlw	3
  3920  000194  182E               	xorwf	_contor,w,c
  3921  000196  102F               	iorwf	_contor+1,w,c
  3922  000198  A4D8               	btfss	status,2,c
  3923  00019A  D048               	goto	i2l271
  3924                           
  3925                           ;main.c: 159: {
  3926                           ;main.c: 162: cor=PORTB;
  3927  00019C  CF81 F034          	movff	3969,_cor	;volatile
  3928  0001A0  6A35               	clrf	_cor+1,c
  3929  0001A2  AC81               	btfss	3969,6,c	;volatile
  3930  0001A4  D7FE               	goto	i2l273
  3931                           
  3932                           ;main.c: 164: {
  3933                           ;main.c: 165: TMR1H=TMR1L=0X00;
  3934  0001A6  0E00               	movlw	0
  3935  0001A8  6ECE               	movwf	4046,c	;volatile
  3936  0001AA  CFCE FFCF          	movff	4046,4047	;volatile
  3937                           
  3938                           ;main.c: 166: T1CONbits.TMR1ON=1;
  3939  0001AE  80CD               	bsf	4045,0,c	;volatile
  3940  0001B0  BC81               	btfsc	3969,6,c	;volatile
  3941  0001B2  D7FE               	goto	i2l276
  3942                           
  3943                           ;main.c: 170: {
  3944                           ;main.c: 171: T1CONbits.TMR1ON=0;
  3945  0001B4  90CD               	bcf	4045,0,c	;volatile
  3946                           
  3947                           ;main.c: 173: TMR = (unsigned int) TMR1H << 8;
  3948  0001B6  50CF               	movf	4047,w,c	;volatile
  3949  0001B8  6E31               	movwf	_TMR+1,c
  3950  0001BA  6A30               	clrf	_TMR,c
  3951                           
  3952                           ;main.c: 174: TMR = TMR + TMR1L;
  3953  0001BC  50CE               	movf	4046,w,c	;volatile
  3954  0001BE  2430               	addwf	_TMR,w,c
  3955  0001C0  6E30               	movwf	_TMR,c
  3956  0001C2  0E00               	movlw	0
  3957  0001C4  2031               	addwfc	_TMR+1,w,c
  3958  0001C6  6E31               	movwf	_TMR+1,c
  3959                           
  3960                           ;main.c: 176: timp_us = (TMR/10) * 20;
  3961  0001C8  0E00               	movlw	0
  3962  0001CA  6E04               	movwf	i2___lwdiv@divisor+1,c
  3963  0001CC  0E0A               	movlw	10
  3964  0001CE  6E03               	movwf	i2___lwdiv@divisor,c
  3965  0001D0  C030  F001         	movff	_TMR,i2___lwdiv@dividend
  3966  0001D4  C031  F002         	movff	_TMR+1,i2___lwdiv@dividend+1
  3967  0001D8  EC6E  F00C         	call	i2___lwdiv	;wreg free
  3968  0001DC  C001  F008         	movff	?i2___lwdiv,i2___wmul@multiplier
  3969  0001E0  C002  F009         	movff	?i2___lwdiv+1,i2___wmul@multiplier+1
  3970  0001E4  0E00               	movlw	0
  3971  0001E6  6E0B               	movwf	i2___wmul@multiplicand+1,c
  3972  0001E8  0E14               	movlw	20
  3973  0001EA  6E0A               	movwf	i2___wmul@multiplicand,c
  3974  0001EC  ECF3  F00C         	call	i2___wmul	;wreg free
  3975  0001F0  C008  F022         	movff	?i2___wmul,_timp_us
  3976  0001F4  C009  F023         	movff	?i2___wmul+1,_timp_us+1
  3977  0001F8  6A24               	clrf	_timp_us+2,c
  3978  0001FA  6A25               	clrf	_timp_us+3,c
  3979                           
  3980                           ;main.c: 177: distanta_stanga = (timp_us / 58)+1 ;
  3981  0001FC  C022  F001         	movff	_timp_us,i2___lldiv@dividend
  3982  000200  C023  F002         	movff	_timp_us+1,i2___lldiv@dividend+1
  3983  000204  C024  F003         	movff	_timp_us+2,i2___lldiv@dividend+2
  3984  000208  C025  F004         	movff	_timp_us+3,i2___lldiv@dividend+3
  3985  00020C  0E3A               	movlw	58
  3986  00020E  6E05               	movwf	i2___lldiv@divisor,c
  3987  000210  0E00               	movlw	0
  3988  000212  6E06               	movwf	i2___lldiv@divisor+1,c
  3989  000214  0E00               	movlw	0
  3990  000216  6E07               	movwf	i2___lldiv@divisor+2,c
  3991  000218  0E00               	movlw	0
  3992  00021A  6E08               	movwf	i2___lldiv@divisor+3,c
  3993  00021C  EC8B  F00A         	call	i2___lldiv	;wreg free
  3994  000220  0E01               	movlw	1
  3995  000222  2401               	addwf	?i2___lldiv,w,c
  3996  000224  6E3A               	movwf	_distanta_stanga,c
  3997  000226  0E00               	movlw	0
  3998  000228  2002               	addwfc	?i2___lldiv+1,w,c
  3999  00022A  6E3B               	movwf	_distanta_stanga+1,c
  4000  00022C                     i2l271:
  4001                           
  4002                           ;main.c: 180: }
  4003                           ;main.c: 182: }
  4004                           ;main.c: 186: INTCONbits.RBIF=0;
  4005  00022C  90F2               	bcf	intcon,0,c	;volatile
  4006                           
  4007                           ;main.c: 187: INTCONbits.PEIE=1;
  4008  00022E  8CF2               	bsf	intcon,6,c	;volatile
  4009  000230  C01F  F043         	movff	??_ISR+17,btemp+3
  4010  000234  C01E  F042         	movff	??_ISR+16,btemp+2
  4011  000238  C01D  F041         	movff	??_ISR+15,btemp+1
  4012  00023C  C01C  F040         	movff	??_ISR+14,btemp
  4013  000240  C01B  FFF5         	movff	??_ISR+13,tablat
  4014  000244  C01A  FFF8         	movff	??_ISR+12,tblptru
  4015  000248  C019  FFF7         	movff	??_ISR+11,tblptrh
  4016  00024C  C018  FFF6         	movff	??_ISR+10,tblptrl
  4017  000250  C017  FFF4         	movff	??_ISR+9,prodh
  4018  000254  C016  FFF3         	movff	??_ISR+8,prodl
  4019  000258  C015  FFDA         	movff	??_ISR+7,fsr2h
  4020  00025C  C014  FFD9         	movff	??_ISR+6,fsr2l
  4021  000260  C013  FFE2         	movff	??_ISR+5,fsr1h
  4022  000264  C012  FFE1         	movff	??_ISR+4,fsr1l
  4023  000268  C011  FFEA         	movff	??_ISR+3,fsr0h
  4024  00026C  C010  FFE9         	movff	??_ISR+2,fsr0l
  4025  000270  C00F  FFFB         	movff	??_ISR+1,pclatu
  4026  000274  C00E  FFFA         	movff	??_ISR,pclath
  4027  000278  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4028  00027A  0011               	retfie		f
  4029  00027C                     __end_of_ISR:
  4030                           	opt stack 0
  4031                           pclatu	equ	0xFFB
  4032                           pclath	equ	0xFFA
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           intcon3	equ	0xFF0
  4042                           indf0	equ	0xFEF
  4043                           postinc0	equ	0xFEE
  4044                           fsr0h	equ	0xFEA
  4045                           fsr0l	equ	0xFE9
  4046                           wreg	equ	0xFE8
  4047                           fsr1h	equ	0xFE2
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function i2___wmul *****************
  4057 ;; Defined at:
  4058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;  multiplier      2    7[COMRAM] unsigned int 
  4061 ;;  multiplicand    2    9[COMRAM] unsigned int 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  __wmul          2   11[COMRAM] unsigned int 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  2    7[COMRAM] unsigned int 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, status,0, prodl, prodh
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;Total ram usage:        6 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; This function calls:
  4080 ;;		Nothing
  4081 ;; This function is called by:
  4082 ;;		_ISR
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text23
  4087  0019E6                     __ptext23:
  4088                           	opt stack 0
  4089  0019E6                     i2___wmul:
  4090                           	opt stack 23
  4091                           
  4092                           ;incstack = 0
  4093  0019E6  5008               	movf	i2___wmul@multiplier,w,c
  4094  0019E8  020A               	mulwf	i2___wmul@multiplicand,c
  4095  0019EA  CFF3 F00C          	movff	prodl,i2___wmul@product
  4096  0019EE  CFF4 F00D          	movff	prodh,i2___wmul@product+1
  4097  0019F2  5008               	movf	i2___wmul@multiplier,w,c
  4098  0019F4  020B               	mulwf	i2___wmul@multiplicand+1,c
  4099  0019F6  50F3               	movf	prodl,w,c
  4100  0019F8  260D               	addwf	i2___wmul@product+1,f,c
  4101  0019FA  5009               	movf	i2___wmul@multiplier+1,w,c
  4102  0019FC  020A               	mulwf	i2___wmul@multiplicand,c
  4103  0019FE  50F3               	movf	prodl,w,c
  4104  001A00  260D               	addwf	i2___wmul@product+1,f,c
  4105  001A02  C00C  F008         	movff	i2___wmul@product,?i2___wmul
  4106  001A06  C00D  F009         	movff	i2___wmul@product+1,?i2___wmul+1
  4107  001A0A  0012               	return	
  4108  001A0C                     __end_ofi2___wmul:
  4109                           	opt stack 0
  4110                           pclatu	equ	0xFFB
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon2	equ	0xFF1
  4120                           intcon3	equ	0xFF0
  4121                           indf0	equ	0xFEF
  4122                           postinc0	equ	0xFEE
  4123                           fsr0h	equ	0xFEA
  4124                           fsr0l	equ	0xFE9
  4125                           wreg	equ	0xFE8
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function i2___lwdiv *****************
  4136 ;; Defined at:
  4137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  dividend        2    0[COMRAM] unsigned int 
  4140 ;;  divisor         2    2[COMRAM] unsigned int 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  4143 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  2    0[COMRAM] unsigned int 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;Total ram usage:        7 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_ISR
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text24
  4167  0018DC                     __ptext24:
  4168                           	opt stack 0
  4169  0018DC                     i2___lwdiv:
  4170                           	opt stack 23
  4171                           
  4172                           ;incstack = 0
  4173  0018DC  0E00               	movlw	0
  4174  0018DE  6E06               	movwf	i2___lwdiv@quotient+1,c
  4175  0018E0  0E00               	movlw	0
  4176  0018E2  6E05               	movwf	i2___lwdiv@quotient,c
  4177  0018E4  5003               	movf	i2___lwdiv@divisor,w,c
  4178  0018E6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  4179  0018E8  B4D8               	btfsc	status,2,c
  4180  0018EA  D01C               	goto	i2l738
  4181  0018EC  0E01               	movlw	1
  4182  0018EE  6E07               	movwf	i2___lwdiv@counter,c
  4183  0018F0  D004               	goto	i2l733
  4184  0018F2  90D8               	bcf	status,0,c
  4185  0018F4  3603               	rlcf	i2___lwdiv@divisor,f,c
  4186  0018F6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  4187  0018F8  2A07               	incf	i2___lwdiv@counter,f,c
  4188  0018FA                     i2l733:
  4189  0018FA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  4190  0018FC  D7FA               	goto	i2l734
  4191  0018FE                     i2u91_40:
  4192  0018FE  90D8               	bcf	status,0,c
  4193  001900  3605               	rlcf	i2___lwdiv@quotient,f,c
  4194  001902  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  4195  001904  5003               	movf	i2___lwdiv@divisor,w,c
  4196  001906  5C01               	subwf	i2___lwdiv@dividend,w,c
  4197  001908  5004               	movf	i2___lwdiv@divisor+1,w,c
  4198  00190A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  4199  00190C  A0D8               	btfss	status,0,c
  4200  00190E  D005               	goto	i2l737
  4201  001910  5003               	movf	i2___lwdiv@divisor,w,c
  4202  001912  5E01               	subwf	i2___lwdiv@dividend,f,c
  4203  001914  5004               	movf	i2___lwdiv@divisor+1,w,c
  4204  001916  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  4205  001918  8005               	bsf	i2___lwdiv@quotient,0,c
  4206  00191A                     i2l737:
  4207  00191A  90D8               	bcf	status,0,c
  4208  00191C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  4209  00191E  3203               	rrcf	i2___lwdiv@divisor,f,c
  4210  001920  2E07               	decfsz	i2___lwdiv@counter,f,c
  4211  001922  D7ED               	goto	i2u91_40
  4212  001924                     i2l738:
  4213  001924  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  4214  001928  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  4215  00192C  0012               	return		;funcret
  4216  00192E                     __end_ofi2___lwdiv:
  4217                           	opt stack 0
  4218                           pclatu	equ	0xFFB
  4219                           pclath	equ	0xFFA
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon2	equ	0xFF1
  4228                           intcon3	equ	0xFF0
  4229                           indf0	equ	0xFEF
  4230                           postinc0	equ	0xFEE
  4231                           fsr0h	equ	0xFEA
  4232                           fsr0l	equ	0xFE9
  4233                           wreg	equ	0xFE8
  4234                           fsr1h	equ	0xFE2
  4235                           fsr1l	equ	0xFE1
  4236                           indf2	equ	0xFDF
  4237                           postinc2	equ	0xFDE
  4238                           postdec2	equ	0xFDD
  4239                           fsr2h	equ	0xFDA
  4240                           fsr2l	equ	0xFD9
  4241                           status	equ	0xFD8
  4242                           
  4243 ;; *************** function i2___lldiv *****************
  4244 ;; Defined at:
  4245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;  dividend        4    0[COMRAM] unsigned long 
  4248 ;;  divisor         4    4[COMRAM] unsigned long 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;  __lldiv         4    8[COMRAM] unsigned long 
  4251 ;;  __lldiv         1   12[COMRAM] unsigned char 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  4    0[COMRAM] unsigned long 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4261 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;Total ram usage:       13 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_ISR
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text25
  4275  001516                     __ptext25:
  4276                           	opt stack 0
  4277  001516                     i2___lldiv:
  4278                           	opt stack 23
  4279                           
  4280                           ;incstack = 0
  4281  001516  0E00               	movlw	0
  4282  001518  6E09               	movwf	i2___lldiv@quotient,c
  4283  00151A  0E00               	movlw	0
  4284  00151C  6E0A               	movwf	i2___lldiv@quotient+1,c
  4285  00151E  0E00               	movlw	0
  4286  001520  6E0B               	movwf	i2___lldiv@quotient+2,c
  4287  001522  0E00               	movlw	0
  4288  001524  6E0C               	movwf	i2___lldiv@quotient+3,c
  4289  001526  5005               	movf	i2___lldiv@divisor,w,c
  4290  001528  1006               	iorwf	i2___lldiv@divisor+1,w,c
  4291  00152A  1007               	iorwf	i2___lldiv@divisor+2,w,c
  4292  00152C  1008               	iorwf	i2___lldiv@divisor+3,w,c
  4293  00152E  B4D8               	btfsc	status,2,c
  4294  001530  D02A               	goto	i2l685
  4295  001532  0E01               	movlw	1
  4296  001534  6E0D               	movwf	i2___lldiv@counter,c
  4297  001536  D006               	goto	i2l680
  4298  001538  90D8               	bcf	status,0,c
  4299  00153A  3605               	rlcf	i2___lldiv@divisor,f,c
  4300  00153C  3606               	rlcf	i2___lldiv@divisor+1,f,c
  4301  00153E  3607               	rlcf	i2___lldiv@divisor+2,f,c
  4302  001540  3608               	rlcf	i2___lldiv@divisor+3,f,c
  4303  001542  2A0D               	incf	i2___lldiv@counter,f,c
  4304  001544                     i2l680:
  4305  001544  AE08               	btfss	i2___lldiv@divisor+3,7,c
  4306  001546  D7F8               	goto	i2l681
  4307  001548                     i2u88_40:
  4308  001548  90D8               	bcf	status,0,c
  4309  00154A  3609               	rlcf	i2___lldiv@quotient,f,c
  4310  00154C  360A               	rlcf	i2___lldiv@quotient+1,f,c
  4311  00154E  360B               	rlcf	i2___lldiv@quotient+2,f,c
  4312  001550  360C               	rlcf	i2___lldiv@quotient+3,f,c
  4313  001552  5005               	movf	i2___lldiv@divisor,w,c
  4314  001554  5C01               	subwf	i2___lldiv@dividend,w,c
  4315  001556  5006               	movf	i2___lldiv@divisor+1,w,c
  4316  001558  5802               	subwfb	i2___lldiv@dividend+1,w,c
  4317  00155A  5007               	movf	i2___lldiv@divisor+2,w,c
  4318  00155C  5803               	subwfb	i2___lldiv@dividend+2,w,c
  4319  00155E  5008               	movf	i2___lldiv@divisor+3,w,c
  4320  001560  5804               	subwfb	i2___lldiv@dividend+3,w,c
  4321  001562  A0D8               	btfss	status,0,c
  4322  001564  D009               	goto	i2l684
  4323  001566  5005               	movf	i2___lldiv@divisor,w,c
  4324  001568  5E01               	subwf	i2___lldiv@dividend,f,c
  4325  00156A  5006               	movf	i2___lldiv@divisor+1,w,c
  4326  00156C  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  4327  00156E  5007               	movf	i2___lldiv@divisor+2,w,c
  4328  001570  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  4329  001572  5008               	movf	i2___lldiv@divisor+3,w,c
  4330  001574  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  4331  001576  8009               	bsf	i2___lldiv@quotient,0,c
  4332  001578                     i2l684:
  4333  001578  90D8               	bcf	status,0,c
  4334  00157A  3208               	rrcf	i2___lldiv@divisor+3,f,c
  4335  00157C  3207               	rrcf	i2___lldiv@divisor+2,f,c
  4336  00157E  3206               	rrcf	i2___lldiv@divisor+1,f,c
  4337  001580  3205               	rrcf	i2___lldiv@divisor,f,c
  4338  001582  2E0D               	decfsz	i2___lldiv@counter,f,c
  4339  001584  D7E1               	goto	i2u88_40
  4340  001586                     i2l685:
  4341  001586  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  4342  00158A  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  4343  00158E  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  4344  001592  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  4345  001596  0012               	return		;funcret
  4346  001598                     __end_ofi2___lldiv:
  4347                           	opt stack 0
  4348                           pclatu	equ	0xFFB
  4349                           pclath	equ	0xFFA
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           prodh	equ	0xFF4
  4355                           prodl	equ	0xFF3
  4356                           intcon	equ	0xFF2
  4357                           intcon2	equ	0xFF1
  4358                           intcon3	equ	0xFF0
  4359                           indf0	equ	0xFEF
  4360                           postinc0	equ	0xFEE
  4361                           fsr0h	equ	0xFEA
  4362                           fsr0l	equ	0xFE9
  4363                           wreg	equ	0xFE8
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           fsr2h	equ	0xFDA
  4370                           fsr2l	equ	0xFD9
  4371                           status	equ	0xFD8
  4372                           pclatu	equ	0xFFB
  4373                           pclath	equ	0xFFA
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           intcon2	equ	0xFF1
  4382                           intcon3	equ	0xFF0
  4383                           indf0	equ	0xFEF
  4384                           postinc0	equ	0xFEE
  4385                           fsr0h	equ	0xFEA
  4386                           fsr0l	equ	0xFE9
  4387                           wreg	equ	0xFE8
  4388                           fsr1h	equ	0xFE2
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397                           	psect	rparam
  4398  0000                     pclatu	equ	0xFFB
  4399                           pclath	equ	0xFFA
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           intcon2	equ	0xFF1
  4408                           intcon3	equ	0xFF0
  4409                           indf0	equ	0xFEF
  4410                           postinc0	equ	0xFEE
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           fsr1h	equ	0xFE2
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           postinc2	equ	0xFDE
  4418                           postdec2	equ	0xFDD
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423                           	psect	temp
  4424  000040                     btemp:
  4425                           	opt stack 0
  4426  000040                     	ds	1
  4427  0000                     int$flags	set	btemp
  4428  0000                     wtemp6	set	btemp+1
  4429                           pclatu	equ	0xFFB
  4430                           pclath	equ	0xFFA
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           intcon	equ	0xFF2
  4438                           intcon2	equ	0xFF1
  4439                           intcon3	equ	0xFF0
  4440                           indf0	equ	0xFEF
  4441                           postinc0	equ	0xFEE
  4442                           fsr0h	equ	0xFEA
  4443                           fsr0l	equ	0xFE9
  4444                           wreg	equ	0xFE8
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8


Data Sizes:
    Strings     25
    Constant    10
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     33      63
    BANK0           160     31      45
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_10(CODE[5]), STR_7(CODE[5]), STR_3(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> buffer(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[3]), buffer(BANK0[8]), STR_2(CODE[3]), 
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _sprintf->___wmul
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Init->_Lcd_Port
    _Lcd_Cmd->_Lcd_Port
    _I2C_Write_Display->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait

Critical Paths under _ISR in COMRAM

    _ISR->i2___lldiv
    _ISR->i2___wmul
    i2___wmul->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _config->_I2C_Master_Init
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _I2C_Master_Init->___lldiv
    _Cursor_Off->_Lcd_Cmd
    _Lcd_Port->_I2C_Write_Display

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   11721
                                             30 BANK0      1     1      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             _config
                       _get_distance
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             28    22      6    3614
                                             11 BANK0     19    13      6
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     748
                                             31 COMRAM     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                             31 COMRAM     1     1      0
                                              7 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     751
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _get_distance                                         1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _config                                               4     4      0    5323
                                             21 BANK0      4     4      0
                         _Cursor_Off
                    _I2C_Master_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1650
                                              5 BANK0      6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     530
                                              2 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1134
                                              8 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     716
                                              8 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     474
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     872
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     751
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _Cursor_Off                                           0     0      0     474
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              6     6      0     474
                                              2 BANK0      6     6      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     242
                                             32 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                  _I2C_Write_Display
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Display                                    2     0      2     211
                                              0 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                 18    18      0     949
                                             13 COMRAM    18    18      0
                          i2___lldiv
                          i2___lwdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     313
                                              7 COMRAM     6     2      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     318
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) i2___lldiv                                           13     5      8     318
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
   _config
     _Cursor_Off
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _I2C_Master_Init
       ___lldiv
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
       _Lcd_Port
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Write_Display
           _I2C_Master_Wait
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Write_Display
             _I2C_Master_Wait
   _get_distance
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   i2___lldiv
   i2___lwdiv
   i2___wmul
     i2___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      2D       5       28.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     21      3F       1       67.0%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6C      12        0.0%
DATA                 0      0      6C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Nov 25 19:44:05 2018

                         _a 0032         ___wmul@multiplicand 0062          i2___lwdiv@dividend 0001  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         l121 185C                         l133 165E  
                       l301 10FC                         l134 1624                         l310 118C  
        I2C_Write_Display@d 0060                         l311 1194                         l320 123A  
                       l312 11B8                         l321 11E4                         l305 10F4  
                       l306 1120                         l246 126E                         l290 1032  
                       l291 104C                         l293 1062                         l294 105A  
                       l299 1092                         l733 18A8                         l734 18A0  
                       l654 1A26                         l743 1946                         l680 14C2  
                       l744 193E                         l681 14B6                         l737 18C8  
                       l738 18D2                         l747 195E                         l684 14F6  
                       l748 1968                         l685 1504                __CFG_CPB$OFF 000000  
              __CFG_CPD$OFF 000000                         _ISR 0008                         _TMR 0030  
                       _cnt 002C                         _cor 0034                         wreg 000FE8  
              __CFG_LVP$OFF 000000                        ?_ISR 0001                        l2363 113C  
                      STR_1 1010                        STR_2 101E                        STR_3 100B  
                      STR_4 1021                        STR_5 1015                        STR_6 1018  
                      STR_7 100B                        STR_8 1021                        STR_9 101B  
                      u1100 14C6                        u1210 18AC                        u1125 17A0  
                      u1150 1654                        u1310 1168                        u1160 168C  
                      u1240 194A                        u1157 164A                        _LATA 000F89  
                      _LATB 000F8A                        u1167 1682                        _LATC 000F8B  
                      u1360 11C0                        _LATD 000F8C                        _LATE 000F8D  
                      u1370 11DE                        u1507 1610                        u1427 1378  
                      u1380 1242                        u1517 1406                        u1437 15A0  
                      u1390 125C                        u1527 1444                        u1447 15B6  
                      u1537 173E                        u1457 15C0                        u1547 1762  
                      u1467 15CC                        u1557 16A2                        u1477 15E2  
                      u1567 16BA                        u1487 15F0                        u1577 16D2  
                      u1497 1606                        u1587 1814              ??_get_distance 0020  
                      _data 003E           ?_Lcd_Write_String 0065                        _main 126A  
                      fsr0h 000FEA                        fsr1h 000FE2          i2___lwdiv@quotient 0005  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      btemp 0040               __CFG_BORV$190 000000                        prodh 000FF4  
                      prodl 000FF3                        start 027C          ??_Lcd_Write_String 0067  
             __CFG_IESO$OFF 000000             __end_of_Lcd_Cmd 182E                ___param_bank 000000  
                     ??_ISR 000E            ?_I2C_Master_Init 006D            ?_I2C_Master_Wait 0001  
          ?_I2C_Master_Stop 0001                       ?_main 0001                       STR_10 100B  
                     STR_11 1021             __end_of___lldiv 1516                       _T1CON 000FCD  
           __end_of___lwdiv 18DC             __end_of___lwmod 1972                       i2l262 0074  
                     i2l271 022C                       i2l264 018E                       i2l273 01A2  
                     i2l257 00F0                       i2l266 0104                       i2l259 0066  
                     i2l276 01B0                       i2l269 0112                       i2l733 18FA  
                     i2l734 18F2                       i2l680 1544                       i2l681 1538  
                     i2l737 191A                       i2l738 1924                       i2l684 1578  
                     i2l685 1586                       _TMR1H 000FCF                       _TMR1L 000FCE  
                     _PORTA 000F80                       _PORTB 000F81                       _PORTC 000F82  
                     _PORTD 000F83                       _PORTE 000F84     __size_of_Lcd_Set_Cursor 005A  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96        _corectie_mdr_dreapta 0081  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000                       _delay 003C             __end_of_dpowers 100B  
           __end_of_isdigit 1A2E          __CFG_MCLRE$EXTMCLR 000000                       _start 002A  
            __CFG_BOREN$OFF 000000                       pclath 000FFA                       tablat 000FF5  
          __end_ofi2___wmul 1A0C                       status 000FD8                       wtemp6 0041  
           __end_of_sprintf 126A              __CFG_HFOFST$ON 000000          __size_ofi2___lldiv 0082  
        __size_ofi2___lwdiv 0052            __end_of_Lcd_Init 170C            __end_of_Lcd_Port 19E6  
               _Lcd_Cmd$654 0064             __initialization 199A           i2___lldiv@divisor 0005  
              __end_of_main 1384           i2___lldiv@counter 000D                  _Cursor_Off 1A4E  
                    ??_main 007E          __size_of_Lcd_Clear 000E               __activetblptr 000002  
         ?_I2C_Master_Start 0001          ??_I2C_Master_Start 0021                      _ANSELA 000F38  
                    _ANSELB 000F39                      _ANSELC 000F3A                      _ANSELD 000F3B  
                    _ANSELE 000F3C                      _T1GCON 000FCC              __CFG_WDTEN$OFF 000000  
                 ??_Lcd_Cmd 0062     __size_of_Lcd_Write_Char 0068                      _SSPBUF 000FC9  
            __CFG_XINST$OFF 000000                      ___wmul 1972                   ??___lldiv 0020  
                 ??___lwdiv 0020                   ??___lwmod 0020                      _config 1384  
                    _buffer 0085                      _contor 002E                      clear_0 19A0  
                    clear_1 19AC        __end_of_get_distance 1618                   ??_isdigit 0020  
         __end_ofi2___lldiv 1598           __end_ofi2___lwdiv 192E                __mediumconst 0000  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                 ??_sprintf 0071             Lcd_Set_Cursor@a 0069             Lcd_Set_Cursor@b 0068  
           Lcd_Set_Cursor@y 006B             Lcd_Set_Cursor@z 006A                  __accesstop 0060  
   __end_of__initialization 19B2             __CFG_PBADEN$OFF 000000           __end_of_Lcd_Clear 1A4E  
             ___rparam_used 000001              __pcstackCOMRAM 0001          i2___lldiv@dividend 0001  
               ?_Cursor_Off 0001                   ?i2___wmul 0008              _Lcd_Set_Cursor 182E  
                 ?_Lcd_Init 0001                   ?_Lcd_Port 0001                sprintf@width 007B  
        i2___lldiv@quotient 0009                  __pbssBANK0 007F             __CFG_PLLCFG$OFF 000000  
        __CFG_CCP2MX$PORTC1 000000                     ?___wmul 0060          __CFG_CCP3MX$PORTB5 000000  
                   ?_config 0001           _I2C_Write_Display 1A5C   __size_of_Lcd_Write_String 007C  
    __end_of_Lcd_Set_Cursor 1888          ?_I2C_Write_Display 0060                  ??i2___wmul 000C  
                   i2u91_40 18FE         ??_I2C_Write_Display 0021                  ??_Lcd_Init 0068  
                   i2u88_40 1548                     _SSP1ADD 000FC8                     _SSP1BUF 000FC9  
                ??_Lcd_Port 0021              _Lcd_Write_Char 170C                     _Lcd_Cmd 17D2  
       __size_of_Cursor_Off 000E             __CFG_PWRTEN$OFF 000000                     __Hparam 0000  
                   __Lparam 0000   __end_of_I2C_Write_Display 1A66       __size_of_get_distance 0080  
                   ___lldiv 1492             __size_of___wmul 0028                     ___lwdiv 1888  
                   ___lwmod 192E                __psmallconst 1000             __size_of_config 010E  
           __CFG_STVREN$OFF 000000                     __pcinit 199A                     __ramtop 1000  
           ?_Lcd_Set_Cursor 0068                     __ptext0 126A                     __ptext1 1026  
                   __ptext2 1A0C                     __ptext3 1972                     __ptext4 192E  
                   __ptext5 1888                     __ptext6 1598                     __ptext7 1384  
                   __ptext8 1618                     __ptext9 170C                __size_of_ISR 0274  
                 _T1CONbits 000FCD                     _dpowers 1001                     _isdigit 1A0C  
  __size_of_I2C_Master_Init 005E    __size_of_I2C_Master_Wait 0012    __size_of_I2C_Master_Stop 0008  
                   _timp_us 0022                     _sprintf 1026      __end_of_Lcd_Write_Char 1774  
      end_of_initialization 19B2               __Lmediumconst 0000         i2___wmul@multiplier 0008  
              _get_distance 1598   __size_of_I2C_Master_Start 0008             ___lldiv@divisor 0064  
           ___lldiv@counter 006C            I2C_Master_Init@c 006D                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTBbits 000F81  
              _corectie_mst 0083                   _TRISBbits 000F93                   _TRISCbits 000F94  
         i2___lwdiv@divisor 0003                   i2___lldiv 1516             ?_Lcd_Write_Char 0001  
                 i2___lwdiv 18DC           i2___lwdiv@counter 0007                  _vit_offset 0026  
         Lcd_Write_String@a 0065           Lcd_Write_String@i 0069                   _Lcd_Clear 1A40  
__size_of_I2C_Write_Display 000A                ??_Cursor_Off 0022              __end_of___wmul 199A  
          _Lcd_Write_String 1618              __end_of_config 1492            i2___wmul@product 000C  
       start_initialization 199A                 __end_of_ISR 027C           __size_ofi2___wmul 0026  
                ?i2___lldiv 0001                  ?i2___lwdiv 0001           __size_of_Lcd_Init 0078  
         __size_of_Lcd_Port 0026           ??_I2C_Master_Init 0071           ??_I2C_Master_Wait 0020  
         ??_I2C_Master_Stop 0021          __end_of_Cursor_Off 1A5C                  ?_Lcd_Clear 0001  
                  ??___wmul 0020                    ??_config 0075             Lcd_Write_Char@a 0062  
           Lcd_Write_Char@y 0063                 __pbssCOMRAM 0022               __pcstackBANK0 0060  
              _isdigit$1262 0060                    ?_Lcd_Cmd 0001                 sprintf@flag 0077  
               sprintf@prec 007A                 _diff_centru 007F            _I2C_Master_Start 1A6E  
          ___lwdiv@dividend 0060            ??_Lcd_Set_Cursor 0022                   __pintcode 0008  
                  ?___lldiv 0060                    ?___lwdiv 0060                    ?___lwmod 0067  
          __CFG_PRICLKEN$ON 000000                 __smallconst 1000                    ?_isdigit 0001  
          ___lwdiv@quotient 0065                    ?_sprintf 006B                 ??i2___lldiv 0009  
               ??i2___lwdiv 0005              ___wmul@product 0020                    _IOCBbits 000F62  
                  _LATDbits 000F8C                    _PIE1bits 000F9D                    Lcd_Cmd@a 0067  
               ??_Lcd_Clear 0022                    _RCONbits 000FD0            __CFG_WDTPS$32768 000000  
                  _SSP1CON1 000FC6                    _SSP1CON2 000FC5                    _SSP1STAT 000FC7  
                 config@cor 0077           ___wmul@multiplier 0060                    i2___wmul 19E6  
          ??_Lcd_Write_Char 0022                    _Lcd_Init 1694                    _Lcd_Port 19C0  
               _INTCON2bits 000FF1                 _INTCON3bits 000FF0    __end_of_Lcd_Write_String 1694  
          __size_of_Lcd_Cmd 005C                Lcd_Port@data 0021                    __Hrparam 0000  
                  __Lrparam 0000           __CFG_P2BMX$PORTD2 000000       i2___wmul@multiplicand 000A  
          __size_of___lldiv 0084            __size_of___lwdiv 0054            __size_of___lwmod 0044  
                sprintf@val 0078             _I2C_Master_Init 1774             _I2C_Master_Wait 1A2E  
           _I2C_Master_Stop 1A66            __size_of_isdigit 0022             ___lwdiv@divisor 0062  
           ___lwdiv@counter 0064                    __ptext10 182E                    __ptext11 1694  
                  __ptext20 1A6E                    __ptext12 1A40                    __ptext21 1A2E  
                  __ptext13 1774                    __ptext14 1492                    __ptext23 19E6  
                  __ptext15 1A4E                    __ptext24 18DC                    __ptext16 17D2  
                  __ptext25 1516                    __ptext17 19C0                    __ptext18 1A5C  
                  __ptext19 1A66                _SSP1CON2bits 000FC5            __size_of_sprintf 0244  
               Lcd_Cmd@buff 0065               __size_of_main 011A                    int$flags 0040  
                  _vit_norm 0028    __end_of_I2C_Master_Start 1A76                 _OSCTUNEbits 000F9B  
                _INTCONbits 000FF2                    isdigit@c 0061          Lcd_Write_Char@temp 0064  
                  intlevel2 0000                   sprintf@ap 0075            _distanta_dreapta 0036  
                 sprintf@sp 006B            ___lwmod@dividend 0067            ___lldiv@dividend 0060  
                _OSCCONbits 000FD3     __end_of_I2C_Master_Init 17D2     __end_of_I2C_Master_Wait 1A40  
   __end_of_I2C_Master_Stop 1A6E          Lcd_Set_Cursor@temp 006C                    sprintf@c 007D  
                  sprintf@f 006D            ___lldiv@quotient 0068             ___lwmod@divisor 0069  
           ___lwmod@counter 0020             _distanta_stanga 003A           __CFG_T3CMX$PORTC0 000000  
             ?_get_distance 0001           __CFG_FOSC$INTIO67 000000               _distanta_fata 0038  
